var mongo = db.getMongo();
var db = mongo.getDB('nodes');

/*自定义合规-start*/
//db.ComplianceItem.remove({"itemName" : "弱密码检测"})
//db.ComplianceItem.save({
//  "_id" : ObjectId("5ea13e9df4e89c00068a0589"),
//  "itemName" : "弱密码检测",
//  "_version_" : "0",
//  "createTime" :new Date(),
//  "lastModifiedTime" :new Date(),
//  "_class" : "com.ruijie.aggregation.terminal.complianceAction.domain.ComplianceItem"
//})
//
//db.complianceAction.remove({"itemId" : "5ea13e9df4e89c00068a0589"})
//db.complianceAction.save({
//  "_id" : ObjectId("5ea2a41883db1f000692e167"),
//  "itemId" : "5ea13e9df4e89c00068a0589",
//  "category" : NumberInt(99),
//  "name" : "弱密码检测:开启",
//  "templateName" : "Custom",
//  "isTip" : true,
//  "tipMessage" : "终端弱密码检测",
//  "script" : "Function Print-Exception([String]$command){\n\tReturn \"execute Command [$command] Exception,The Exception is $($error[0])\"\n}\nFunction Ret-Success([String] $business){\n\tReturn \"$business%%SMP:success\"\n}\nFunction ConvertToJson{\n\tparam($InputObject);\n\tif($InputObject -is [string]){\n\t\tif(![String]::isNullOrEmpty($InputObject)){$InputObject=$InputObject.replace('\\','/').trim()}\n\t\t\"`\"{0}`\"\" -f $InputObject\n\t}elseif($InputObject -is [bool]){\n\t\t$InputObject.ToString().ToLower();\n\t}elseif($InputObject -eq $null){\n\t\t\"null\"\n\t}elseif($InputObject -is [pscustomobject]){\n\t\t$result=\"{\";\n\t\t$properties=$InputObject|Get-Member -MemberType NoteProperty|ForEach-Object{\n\t\t\tif(![String]::isNullOrEmpty($_.Name)){\"`\"{0}`\":{1}\" -f  $_.Name,(ConvertToJson $InputObject.($_.Name))}\n\t\t};\n\t\t$result+=$properties -join \",\";\n\t\t$result+=\"}\";\n\t\t$result\n\t}elseif($InputObject -is [hashtable]){\n\t\t$result=\"{\";\n\t\t$properties=$InputObject.Keys|ForEach-Object{\n\t\t\tif(![String]::isNullOrEmpty($_)){\"`\"{0}`\":{1}\" -f  $_,(ConvertToJson $InputObject[$_])}\n\t\t};\n\t\t$result+=$properties -join \",\";\n\t\t$result+=\"}\";\n\t\t$result\n\t}elseif($InputObject -is [array]){\n\t\t$result=\"[\";\n\t\t$items=@();\n\t\tfor($i=0;$i -lt $InputObject.length;$i++){\n\t\t\tif(![String]::isNullOrEmpty($InputObject[$i])){$items+=ConvertToJson $InputObject[$i]}\n\t\t\t\n\t\t}\n\t\t$result+=$items -join \",\";\n\t\t$result+=\"]\";\n\t\t$result\n\t}else{\n\t\t\"`\"{0}`\"\" -f $InputObject.ToString().trim()\n\t}\n}\nFunction Test-FileLocked([string]$FilePath) {\n    try {[IO.File]::OpenWrite($FilePath).close();$false}catch{$true}\n}\n\nFunction Download-File([String]$src,[String]$des,[bool]$isReplace=$false){\n\tIf([String]::IsNullOrEmpty($src)){Return \"BusinessException:Source file does not exist\"}\n\tIf([String]::IsNullOrEmpty($des)){Return \"BusinessException:Destination address cannot be empty\"}\n\tIf(Test-Path $des){\n\t\twhile (Test-FileLocked $des){\n\t\t\tsleep 1;\n\t\t\tIf($i++ -gt 1){Return \"File [$des] is in use\"}\n\t\t}\n\t\t$file=ls $des;\n\t\tIf(Test-Path ($file.DirectoryName+\"/\"+$file.basename+\"_end\")){Return Ret-Success \"Download-File:No Need Operator\"}\n\t}\n\tTry{\n\t\t$web=New-Object System.Net.WebClient;\n\t\t$web.Encoding=[System.Text.Encoding]::UTF8;\n\t\t$web.DownloadFile(\"$src\", \"$des\");\n\t\t$file=(ls $des);\n\t\t$endFile=$file.basename+\"_end\";\n\t\tNew-Item -Path $file.DirectoryName -Name $endFile -ItemType \"file\" |Out-Null\n\t\tIf(!(Test-Path $des) -or (Get-Content \"$des\" -totalcount 1) -eq $null){Return \"BusinessException:The downloaded file does not exist or the content is empty\"}\n\t}Catch{Return Print-Exception \"$web.DownloadFile($src,$des)\"}\n\tReturn Ret-Success \"Download-File\"\n}\n\nFunction RunJobSync{\n\tparam(\n\t\t[String] $passAddr='http://172.17.8.218:9888',\n\t\t[bool] $isReCheck=$False,\n\t\t[int] $expires=180\n\t)\n\t$passAddr+=\"/nodeManager/file/download/pwdDb.csv\"\n\t$dbPath=$env:SystemDrive+\"\\Program Files\\Ruijie Networks\\passdb\"\n\tIf(!(Test-Path $dbPath)){mkdir $dbPath|Out-Null}\n\t#Get-WmiObject  Win32_ComputerSystem |select name,domain,PartOfDomain,Status\n\t$accs=@();\n\tGet-WmiObject Win32_userACcount|Where{$_.__SERVER -eq $_.domain -And $_.name -ne $env:username -And $_.status -eq 'ok'}|%{$accs+=$_.name}\n\tIf($accs.count -eq 0){Return (New-Object PSObject -Property @{userName='';status='complete_noDetect';pass='';})}\n\t$res=@()\n\t$outPath=\"${dbPath}\\res.csv\"\n\tIf(!(Test-Path $outPath) -Or $isReCheck){\n\t\t\"userName,pass,status\">$outPath\n\t}Else{\n\t\t$tmps=Import-Csv $outPath\n\t\t[System.Collections.ArrayList]$accs=$accs\n\t\tForeach($tmp in $tmps){\n\t\t\tIf($accs -contains $tmp.userName){\n\t\t\t\t$accs.remove($tmp.userName);\n\t\t\t\t$res+=$tmp\n\t\t\t}\n\t\t}\n\t}\n\t\n\t$pwdPath=\"${dbPath}/pwdDb.csv\"\n\tIf($accs.length -ge 0){\n\t\tIf(!(Test-Path $pwdPath)){\n\t\t\tDownload-File $passAddr $pwdPath|Out-Null\n\t\t}\n\t\t$passes=Import-Csv $pwdPath\n\t\tForeach($acc in $accs){\n\t\t\t$res+=New-Object PSObject -Property @{userName=$acc;status='detecting';pass='';}\n\t\t\t$accFlag=\"${dbPath}/$acc\"\n\t\t\tIf(Test-Path $accFlag){\n\t\t\t\tIf((([datetime](ls $accFlag).LastWriteTime).compareTo((Get-Date).AddMinutes(-($expires)))) -eq -1){\n\t\t\t\t\trm $accFlag\n\t\t\t\t}else{continue}\n\t\t\t}\n\t\t\t$mutex=$false;\n\t\t\t$obj = New-Object System.Threading.Mutex ($true,$acc,[ref]$mutex)\n\t\t\tIf($mutex){\n\t\t\t\tNew-Item  $accFlag -ItemType \"file\"|Out-Null\n\t\t\t\t$obj.ReleaseMutex() | Out-Null\n\t\t\t\t$obj.Dispose() | Out-Null\n\t\t\t}else{continue}\n\t\t\t\n\t\t\t$job=Start-Job -ScriptBlock{\n\t\t\t\t[System.Reflection.Assembly]::LoadWithPartialName('System.DirectoryServices.AccountManagement')|Out-Null\n\t\t\t\t$pc=New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext 'Machine',$env:COMPUTERNAME\n\t\t\t\t$acc=$args[0];\n\t\t\t\t$passes=$args[1];\n\t\t\t\t$outPath=$args[2];\n\t\t\t\tIf($pc.ValidateCredentials($acc,'')){\"$acc,,complete_noPassowrd\">>$outPath;exit}\n\t\t\t\tForeach($pass in $passes){\n\t\t\t\t\tIf($pc.ValidateCredentials($acc,$pass.pwd)){\"$acc,\"+$pass.pwd+\",complete_matched\">>$outPath;exit}\n\t\t\t\t}\n\t\t\t\t\"$acc,,complete_noMatch\">>$outPath;\n\t\t\t\texit\n\t\t\t} -ArgumentList $acc,$passes,$outPath;\n\t\t}\n\t}\n\tReturn $res;\n}\n\n$rr=RunJobSync 'http://172.17.8.218:9888'\n$isSuccess='true'\nForeach($r in $rr){\n\tIf(!$r.status.startsWith('complete')){\n\t\t$isSuccess='false';break\n\t}\n}\n$json=ConvertToJson $rr\nIf(!$json.startsWith('[')){$json='['+$json+']'}\n\"{`\"isSuccess`\":`\"$isSuccess`\",`\"retObj`\":$json}\"",
//  "_version_" : "0",
//  "createTime" :new Date(),
//  "lastModifiedTime" :new Date(),
//  "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
//})
//------------------------------------------------------------------------------------------------------------
db.ComplianceItem.remove({"itemName" : "文件共享"})
db.ComplianceItem.save({
  "_id" : ObjectId("5eba15f791135523981dec15"),
  "itemName" : "文件共享",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.aggregation.terminal.complianceAction.domain.ComplianceItem"
})

db.complianceAction.remove({"itemId" : "5eba15f791135523981dec15"})
db.complianceAction.save({
  "_id" : ObjectId("5eba160291135523981dec17"),
  "itemId" : "5eba15f791135523981dec15",
  "category" : NumberInt(99),
  "name" : "文件共享:关闭",
  "templateName" : "Custom",
  "isTip" : true,
  "tipMessage" : "请手动关闭文件共享",
  "script" : "Function Disable-Share{\r\n        Trap{Return Unified-Return $_.Exception.Message 'Disable-Share'}\r\n        Unified-Return (Set-Share -disable) 'Disable-Share'\r\n};Function Unified-Return([Object[]]$msgs,[Parameter(Mandatory = $true)][String]$business){\r\n        If($msgs -eq $Null -Or $msgs.count -eq 0){\r\n                $isSuccess='false';\r\n                $msg='No message returned';\r\n        }Else{\r\n                If(($msgs[-1]).EndsWith('%%SMP:success')){\r\n                        $isSuccess='true';\r\n                }Else{\r\n                        $isSuccess='false';\r\n                }\r\n                $msg=($msgs -Join ';    ').replace('\\','/')\r\n        }\r\n        Return \"{`\"isSuccess`\":`\"$isSuccess`\",`\"msg`\":`\"$msg`\",`\"business`\":`\"$business`\"}\";\r\n};Function Set-Share([Switch] $enable,[Switch] $disable){\r\n        If(!$enable -and !$disable){throw \"Please enter enable or disable\"}\r\n        $svcName='LanmanServer'\r\n        $server=Get-Service $svcName -ErrorAction SilentlyContinue\r\n        If($enable){\r\n                If(!$server){throw \"There is no shared service in the system , Please install this service first\"}\r\n                If($server.StartType -ne 'Automatic'){Set-Service $svcName -StartupType Automatic -ErrorAction SilentlyContinue}\r\n                If($server.status -ne 'Running'){Start-Service $svcName}\r\n        }Else{\r\n                If(!$server){return \"There is no shared service in the system , not need oprate\"}\r\n                If($server.StartType -ne 'Disabled'){Set-Service $svcName -StartupType Disabled -ErrorAction SilentlyContinue}\r\n                If($server.status -ne 'Stopped'){Stop-Service $svcName}\r\n        }\r\n        Ret-Success\r\n};Function Ret-Success([String] $business){\r\n        Return \"$business%%SMP:success\"\r\n};Disable-Share",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
})
db.complianceAction.save({
  "_id" : ObjectId("5f2d2b599113555704742bde"),
  "itemId" : "5eba15f791135523981dec15",
  "category" : NumberInt(99),
  "name" : "文件共享:开启",
  "templateName" : "Custom",
  "isTip" : true,
  "tipMessage" : "请手动开启文件共享",
  "script" : "Function Enable-Share{\r\n        Trap{Return Unified-Return $_.Exception.Message 'Enable-Share'}\r\n        Unified-Return (Set-Share -enable) 'Enable-Share'\r\n};Function Unified-Return([Object[]]$msgs,[Parameter(Mandatory = $true)][String]$business){\r\n        If($msgs -eq $Null -Or $msgs.count -eq 0){\r\n                $isSuccess='false';\r\n                $msg='No message returned';\r\n        }Else{\r\n                If(($msgs[-1]).EndsWith('%%SMP:success')){\r\n                        $isSuccess='true';\r\n                }Else{\r\n                        $isSuccess='false';\r\n                }\r\n                $msg=($msgs -Join ';    ').replace('\\','/')\r\n        }\r\n        Return \"{`\"isSuccess`\":`\"$isSuccess`\",`\"msg`\":`\"$msg`\",`\"business`\":`\"$business`\"}\";\r\n};Function Set-Share([Switch] $enable,[Switch] $disable){\r\n        If(!$enable -and !$disable){throw \"Please enter enable or disable\"}\r\n        $svcName='LanmanServer'\r\n        $server=Get-Service $svcName -ErrorAction SilentlyContinue\r\n        If($enable){\r\n                If(!$server){throw \"There is no shared service in the system , Please install this service first\"}\r\n                If($server.StartType -ne 'Automatic'){Set-Service $svcName -StartupType Automatic -ErrorAction SilentlyContinue}\r\n                If($server.status -ne 'Running'){Start-Service $svcName}\r\n        }Else{\r\n                If(!$server){return \"There is no shared service in the system , not need oprate\"}\r\n                If($server.StartType -ne 'Disabled'){Set-Service $svcName -StartupType Disabled -ErrorAction SilentlyContinue}\r\n                If($server.status -ne 'Stopped'){Stop-Service $svcName}\r\n        }\r\n        Ret-Success\r\n};Function Ret-Success([String] $business){\r\n        Return \"$business%%SMP:success\"\r\n};Enable-Share",
   "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
})
//------------------------------------------------------------------------------------------------------------
db.ComplianceItem.remove({"itemName" : "外设管理"})
db.ComplianceItem.save({
  "_id" : ObjectId("5eba3e7e91135523981dec1d"),
  "itemName" : "外设管理",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.aggregation.terminal.complianceAction.domain.ComplianceItem"
})
db.complianceAction.remove({"itemId" : "5eba3e7e91135523981dec1d"})
db.complianceAction.save({
  "_id" : ObjectId("5eba3eab91135523981dec1f"),
  "itemId" : "5eba3e7e91135523981dec1d",
  "category" : NumberInt(99),
  "name" : "可移动磁盘:关闭",
  "templateName" : "Custom",
  "isTip" : true,
  "tipMessage" : "请手动关闭usb的驱动",
  "script" : "Function Set-PeripheralStatus($status){\r\n        Check-OperateStatus $status -ErrorAction SilentlyContinue\r\n        If(!$?){Return Print-Exception \"Set-PeripheralStatus\"}\r\n        \r\n        #启用或禁用设备实体\r\n        Set-RemovableDiskIns $status -ErrorAction SilentlyContinue\r\n        \r\n        #启用或禁用[驱动,服务]\r\n        $msg=Set-RemovableDiskDrive $status -ErrorAction SilentlyContinue\r\n        \r\n        If(!$?){$msg}Else{\"$msg %%SMP:success\"}\r\n};Function Check-OperateStatus($status){\r\n        If(@('Disable','Enable') -notcontains $status ){throw \"Illegal flag for peripheral operation. The correct flag is [Disable, Enable]\"}\r\n};Function Set-RemovableDiskIns($status){\r\n        Check-OperateStatus $status\r\n        \r\n        #内核版本低于5,跳过\r\n        If($PSVersionTable.BuildVersion.Major -le 5){Return}\r\n        \r\n        #ps5.0以上版本\r\n        If($PSVersionTable.PSVersion.Major -ge 5){\r\n                Return Set-RemovableDiskInsForPs5 $status -ErrorAction SilentlyContinue\r\n        }\r\n\r\n        #获取设备实体\r\n        $RemovableDisk=Get-RemovableDiskIns\r\n        If($RemovableDisk -eq $null -Or $RemovableDisk.count -eq 0){Return \"There is no removable disk connected to the system %%SMP:success\"}\r\n        #启用或禁用设备实体\r\n        Foreach($rem In $RemovableDisk){\r\n                gwmi Win32_Volume|？DriveLetter -And  DriveLetter.substring(0,1) -eq $rem|%{\r\n                        If('Enable' -eq $flag){\r\n                                #启用设备实体 TODO\r\n                                $null=$_.AddMountPoint($diskCharacter)\r\n                        }ELse{\r\n                                #禁用设备实体\r\n                                $_.DriveLetter=$null;\r\n                                $null=$_.Put();\r\n                                $null=$_.Dismount($false, $false)\r\n                        }\r\n                }\r\n        }\r\n};Function Set-RemovableDiskInsForPs5($status){\r\n        Check-OperateStatus $status\r\n        If('disable' -eq $status){\r\n                Get-PnpDevice|?{$_.Class -eq 'WPD'  -and $_.Status -eq 'ok'}|Disable-PnpDevice -Confirm:$false\r\n        }Else{\r\n                Get-PnpDevice|?{$_.Class -eq 'WPD'  -and $_.Status -eq 'error'}|Enable-PnpDevice -Confirm:$false\r\n        }\r\n};Function Get-RemovableDiskIns{\r\n        If($PSVersionTable.PSVersion.Major -ge 4){\r\n                Return [Object[]](Get-Disk|? BusType -eq USB|Get-Partition|Get-Volume|%{If($_.DriveLetter){$_.DriveLetter.substring(0,1)}})\r\n        }\r\n        $Array=@()\r\n        $USBDrives=gwmi win32_DiskDrive|?{ $_.InterfaceType -eq 'USB' }\r\n        If($USBDrives -eq $null){Return $Array}\r\n        $DriveToPartitionMappings=gwmi Win32_DiskDriveToDiskPartition|Select Antecedent,Dependent\r\n        $LogicalDiskMappings=gwmi Win32_LogicalDiskToPartition\r\n        $LogicalDisks=gwmi Win32_LogicalDisk\r\n        Foreach ($Device in $USBDrives){\r\n                $DiskPhysicalDrive=\"PHYSICALDRIVE\" + \"$($Device.Index)\"\r\n                $DriveToPartition=$DriveToPartitionMappings|? {$_.Antecedent -match \"$DiskPhysicalDrive\"}|%{$_.Dependent}\r\n                If($DriveToPartition -eq $null){Continue}\r\n                $PartitionToLogicalDisk=$LogicalDiskMappings|?{[Object[]]$DriveToPartition -contains $_.Antecedent}\r\n                If($PartitionToLogicalDisk -eq $null){Continue}\r\n                $LogicalDisk=$LogicalDisks|? {($_.Path).Path -eq ($PartitionToLogicalDisk.Dependent)}\r\n                If($LogicalDisk -ne $null){$Array += $LogicalDisk.DeviceID.substring(0,1)}\r\n        }\r\n        Return $Array\r\n};Function Set-RemovableDiskDrive($status){\r\n        Check-OperateStatus $status\r\n\r\n        $osVer = (Get-WmiObject Win32_OperatingSystem).caption\r\n        If($osVer -ne \"Microsoft Windows 7 Enterprise\"){\r\n                If (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\")){   \r\n                        $arguments = \"& '\" + $myinvocation.mycommand.definition + \"'\"\r\n                        Start-Process powershell -Verb runAs -ArgumentList $arguments\r\n                        Break\r\n                }\r\n        }\r\n\r\n        $usb_Reg=\"HKLM:\\SYSTEM\\CurrentControlSet\\services\\USBSTOR\"\r\n        If(!(Test-Path $usb_Reg)){$Null=md $usb_Reg -Force}\r\n        $usb_State = Get-ItemProperty $usb_Reg\r\n        $cdDvd_reg=\"HKLM:\\SYSTEM\\CurrentControlSet\\services\\cdrom\"\r\n        If(!(Test-Path $cdDvd_reg)){$Null=md $cdDvd_reg -Force}\r\n        $cdDvdRom_State = Get-ItemProperty $cdDvd_reg\r\n        $storageDev=\"HKLM:\\Software\\Policies\\Microsoft\\Windows\\RemovableStorageDevices\"\r\n        $msg=@();\r\n        If(\"Enable\" -eq $status){\r\n                $msg+=\"Enabling USB Storage...\"\r\n                If($usb_State.start -ne 3){Set-ItemProperty $usb_Reg -Name start -Value 3}\r\n                Start-Sleep -Seconds 1\r\n                $msg+=\"Enabling CD/DVD ROM...\"\r\n                If($cdDvdRom_State.start -ne 1){Set-ItemProperty $cdDvd_reg -Name start -Value 1}\r\n                $msg+=\"Enabling Card Readers...\"\r\n                Remove-ItemProperty $storageDev -Name Deny_All -Force -ErrorAction SilentlyContinue ; \r\n        }Else{\r\n                $msg+=\"Disabling USB Storage...\"\r\n                If($usb_State.start -ne 4){Set-ItemProperty $usb_Reg -Name start -Value 4}\r\n                Start-Sleep -Seconds 1\r\n                $msg+=\"Disabling CD/DVD ROM...\"\r\n                If($cdDvdRom_State.start -ne 4){Set-ItemProperty $cdDvd_reg -Name start -Value 4}\r\n                $msg+=\"Disabling Card Readers...\"\r\n                If(!(Test-Path $storageDev)){$Null=md $storageDev -Force -ErrorAction SilentlyContinue}\r\n                $Null=New-ItemProperty $storageDev -Name Deny_All -Value 1 -PropertyType DWORD\r\n        }\r\n        Return $msg\r\n};Set-PeripheralStatus Disable",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
})
db.complianceAction.save({
  "_id" : ObjectId("5eba511d91135523981dec35"),
  "itemId" : "5eba3e7e91135523981dec1d",
  "category" : NumberInt(99),
  "name" : "可移动磁盘:开启",
  "templateName" : "Custom",
  "isTip" : true,
  "tipMessage" : "请手动开启usb的驱动",
  "script" : "Function Set-PeripheralStatus($status){\r\n        Check-OperateStatus $status -ErrorAction SilentlyContinue\r\n        If(!$?){Return Print-Exception \"Set-PeripheralStatus\"}\r\n        \r\n        #启用或禁用设备实体\r\n        Set-RemovableDiskIns $status -ErrorAction SilentlyContinue\r\n        \r\n        #启用或禁用[驱动,服务]\r\n        $msg=Set-RemovableDiskDrive $status -ErrorAction SilentlyContinue\r\n        \r\n        If(!$?){$msg}Else{\"$msg %%SMP:success\"}\r\n};Function Check-OperateStatus($status){\r\n        If(@('Disable','Enable') -notcontains $status ){throw \"Illegal flag for peripheral operation. The correct flag is [Disable, Enable]\"}\r\n};Function Set-RemovableDiskIns($status){\r\n        Check-OperateStatus $status\r\n        \r\n        #内核版本低于5,跳过\r\n        If($PSVersionTable.BuildVersion.Major -le 5){Return}\r\n        \r\n        #ps5.0以上版本\r\n        If($PSVersionTable.PSVersion.Major -ge 5){\r\n                Return Set-RemovableDiskInsForPs5 $status -ErrorAction SilentlyContinue\r\n        }\r\n\r\n        #获取设备实体\r\n        $RemovableDisk=Get-RemovableDiskIns\r\n        If($RemovableDisk -eq $null -Or $RemovableDisk.count -eq 0){Return \"There is no removable disk connected to the system %%SMP:success\"}\r\n        #启用或禁用设备实体\r\n        Foreach($rem In $RemovableDisk){\r\n                gwmi Win32_Volume|？DriveLetter -And  DriveLetter.substring(0,1) -eq $rem|%{\r\n                        If('Enable' -eq $flag){\r\n                                #启用设备实体 TODO\r\n                                $null=$_.AddMountPoint($diskCharacter)\r\n                        }ELse{\r\n                                #禁用设备实体\r\n                                $_.DriveLetter=$null;\r\n                                $null=$_.Put();\r\n                                $null=$_.Dismount($false, $false)\r\n                        }\r\n                }\r\n        }\r\n};Function Set-RemovableDiskInsForPs5($status){\r\n        Check-OperateStatus $status\r\n        If('disable' -eq $status){\r\n                Get-PnpDevice|?{$_.Class -eq 'WPD'  -and $_.Status -eq 'ok'}|Disable-PnpDevice -Confirm:$false\r\n        }Else{\r\n                Get-PnpDevice|?{$_.Class -eq 'WPD'  -and $_.Status -eq 'error'}|Enable-PnpDevice -Confirm:$false\r\n        }\r\n};Function Get-RemovableDiskIns{\r\n        If($PSVersionTable.PSVersion.Major -ge 4){\r\n                Return [Object[]](Get-Disk|? BusType -eq USB|Get-Partition|Get-Volume|%{If($_.DriveLetter){$_.DriveLetter.substring(0,1)}})\r\n        }\r\n        $Array=@()\r\n        $USBDrives=gwmi win32_DiskDrive|?{ $_.InterfaceType -eq 'USB' }\r\n        If($USBDrives -eq $null){Return $Array}\r\n        $DriveToPartitionMappings=gwmi Win32_DiskDriveToDiskPartition|Select Antecedent,Dependent\r\n        $LogicalDiskMappings=gwmi Win32_LogicalDiskToPartition\r\n        $LogicalDisks=gwmi Win32_LogicalDisk\r\n        Foreach ($Device in $USBDrives){\r\n                $DiskPhysicalDrive=\"PHYSICALDRIVE\" + \"$($Device.Index)\"\r\n                $DriveToPartition=$DriveToPartitionMappings|? {$_.Antecedent -match \"$DiskPhysicalDrive\"}|%{$_.Dependent}\r\n                If($DriveToPartition -eq $null){Continue}\r\n                $PartitionToLogicalDisk=$LogicalDiskMappings|?{[Object[]]$DriveToPartition -contains $_.Antecedent}\r\n                If($PartitionToLogicalDisk -eq $null){Continue}\r\n                $LogicalDisk=$LogicalDisks|? {($_.Path).Path -eq ($PartitionToLogicalDisk.Dependent)}\r\n                If($LogicalDisk -ne $null){$Array += $LogicalDisk.DeviceID.substring(0,1)}\r\n        }\r\n        Return $Array\r\n};Function Set-RemovableDiskDrive($status){\r\n        Check-OperateStatus $status\r\n\r\n        $osVer = (Get-WmiObject Win32_OperatingSystem).caption\r\n        If($osVer -ne \"Microsoft Windows 7 Enterprise\"){\r\n                If (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\")){   \r\n                        $arguments = \"& '\" + $myinvocation.mycommand.definition + \"'\"\r\n                        Start-Process powershell -Verb runAs -ArgumentList $arguments\r\n                        Break\r\n                }\r\n        }\r\n\r\n        $usb_Reg=\"HKLM:\\SYSTEM\\CurrentControlSet\\services\\USBSTOR\"\r\n        If(!(Test-Path $usb_Reg)){$Null=md $usb_Reg -Force}\r\n        $usb_State = Get-ItemProperty $usb_Reg\r\n        $cdDvd_reg=\"HKLM:\\SYSTEM\\CurrentControlSet\\services\\cdrom\"\r\n        If(!(Test-Path $cdDvd_reg)){$Null=md $cdDvd_reg -Force}\r\n        $cdDvdRom_State = Get-ItemProperty $cdDvd_reg\r\n        $storageDev=\"HKLM:\\Software\\Policies\\Microsoft\\Windows\\RemovableStorageDevices\"\r\n        $msg=@();\r\n        If(\"Enable\" -eq $status){\r\n                $msg+=\"Enabling USB Storage...\"\r\n                If($usb_State.start -ne 3){Set-ItemProperty $usb_Reg -Name start -Value 3}\r\n                Start-Sleep -Seconds 1\r\n                $msg+=\"Enabling CD/DVD ROM...\"\r\n                If($cdDvdRom_State.start -ne 1){Set-ItemProperty $cdDvd_reg -Name start -Value 1}\r\n                $msg+=\"Enabling Card Readers...\"\r\n                Remove-ItemProperty $storageDev -Name Deny_All -Force -ErrorAction SilentlyContinue ; \r\n        }Else{\r\n                $msg+=\"Disabling USB Storage...\"\r\n                If($usb_State.start -ne 4){Set-ItemProperty $usb_Reg -Name start -Value 4}\r\n                Start-Sleep -Seconds 1\r\n                $msg+=\"Disabling CD/DVD ROM...\"\r\n                If($cdDvdRom_State.start -ne 4){Set-ItemProperty $cdDvd_reg -Name start -Value 4}\r\n                $msg+=\"Disabling Card Readers...\"\r\n                If(!(Test-Path $storageDev)){$Null=md $storageDev -Force -ErrorAction SilentlyContinue}\r\n                $Null=New-ItemProperty $storageDev -Name Deny_All -Value 1 -PropertyType DWORD\r\n        }\r\n        Return $msg\r\n};Set-PeripheralStatus Enable",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
})
//------------------------------------------------------------------------------------------------------------
db.ComplianceItem.remove({"itemName" : "操作系统服务"})
db.ComplianceItem.save({
  "_id" : ObjectId("5eba431191135523981dec21"),
  "itemName" : "操作系统服务",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.aggregation.terminal.complianceAction.domain.ComplianceItem"
})

db.complianceAction.remove({"itemId" : "5eba431191135523981dec21"})
db.complianceAction.save({
  "_id" : ObjectId("5eba4a3191135523981dec27"),
  "itemId" : "5eba431191135523981dec21",
  "category" : NumberInt(99),
  "name" : "服务:开启",
  "templateName" : "Custom",
  "isTip" : true,
  "tipMessage" : "请手动开启 xxx 服务",
  "script" : "Function Enable-ServicedArr([Object[]]$operator){\r\n        Set-ServicedArr $operator 'enable'\r\n};Function Set-ServicedArr([Object[]]$operator,[String]$action){\r\n        $ErrorActionPreference='SilentlyContinue';\r\n        $msg=@();$err=0;\r\n        If($action -eq 'enable'){\r\n                $startType='Automatic';\r\n                $status='Running'\r\n        }Else{\r\n                $startType='Disabled';\r\n                $status='Stopped'\r\n        }\r\n        \r\n        ConvertFrom-Csv $operator|%{$null=Set-Serviced -serviceName $_.serviceName -startType $startType;Set-Serviced -serviceName $_.serviceName -status $status}|%{If(!$_.EndsWith('%%SMP:success')){$err++}$msg+=$_;}\r\n        \r\n        If($err -eq 0){$isSuccess='true'}Else{$isSuccess='false'}\r\n        $t=($msg -join ' ; ').replace('\\','/');\r\n        \"{`\"isSuccess`\":`\"$isSuccess`\",`\"msg`\":`\"$t`\"}\"\r\n};Filter Set-ServicedF{\r\n        Return Set-Serviced $_.serviceName $_.startType $_.status\r\n};Function Set-Serviced([String]$serviceName,[String]$startType,[String]$status){\r\n        $business=\"[Set-Serviced $serviceName]=>>\"\r\n        If([String]::IsNullOrEmpty($serviceName)){Return \"$business The serviceName can not empty\"}\r\n        $service=Get-Service $serviceName -ErrorAction SilentlyContinue;\r\n        If(!$?){\r\n                If($error[0].ToString() -like '*Cannot find any service*'){\r\n                        If('Stopped' -eq $status){Return \"Cannot find any service with service name ${serviceName} %%SMP:success\"}\r\n                }\r\n                Return Print-Exception \"${business}Get-Service $serviceName\"\r\n        }\r\n        #StartupType:[Boot|System|Automatic|Manual|Disabled],Status:[Running|Stopped|Paused]\r\n        if(![String]::IsNullOrEmpty($startType) -And $service.StartType -ne $startType){\r\n                Set-Service $serviceName -StartupType $startType -ErrorAction SilentlyContinue;\r\n        }\r\n        If(![String]::IsNullOrEmpty($status) -And $service.status -ne $status){\r\n                If('Running' -eq $service.status){\r\n                        Stop-Service $serviceName -Force -ErrorAction SilentlyContinue;\r\n                        If(!$?){Return Print-Exception \"Stop-Service $serviceName -Force\"}\r\n                }Else{\r\n                        Start-Service $serviceName -ErrorAction SilentlyContinue;\r\n                        If(!$?){Return Print-Exception \"Start-Service $serviceName\"}\r\n                }\r\n        }\r\n        Return Ret-Success $business\r\n};Function Ret-Success([String] $business){\r\n        Return \"$business%%SMP:success\"\r\n};Function Print-Exception([String]$command){\r\n        Return \"execute Command [$command] Exception,The Exception is $($error[0])\"\r\n};<#\r\n!!以上代码均为固定模式,非专业人士不要修改!!\r\n!!以下代码为调度部分;调度部分用法如下\r\n不可修改部分:\r\n        \"Enable-ServicedArr\"    =>调度方法\r\n        \"serviceName\"           =>服务名导航字段\r\n可修改部分: \r\n        服务名,用户可根据实际业务需要进行新增或删除\r\n功能:\r\n        启用指定服务操作\r\n格式: Enable-ServicedArr @( \"serviceName\",\"服务名1\",...,\"服务名n\" )\r\n#>\r\nEnable-ServicedArr @('serviceName','tvnserver','ftpsvc')",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
})
db.complianceAction.save({
  "_id" : ObjectId("5eba4a9691135523981dec29"),
  "itemId" : "5eba431191135523981dec21",
  "category" : NumberInt(99),
  "name" : "服务:关闭",
  "templateName" : "Custom",
  "isTip" : true,
  "tipMessage" : "请手动关闭 xxx 服务",
  "script" : "Function Disable-ServicedArr([Object[]]$operator){\r\n\tSet-ServicedArr $operator 'disable'\r\n};Function Set-ServicedArr([Object[]]$operator,[String]$action){\r\n\t$ErrorActionPreference='SilentlyContinue';\r\n\t$msg=@();$err=0;\r\n\tIf($action -eq 'enable'){\r\n\t\t$startType='Automatic';\r\n\t\t$status='Running'\r\n\t}Else{\r\n\t\t$startType='Disabled';\r\n\t\t$status='Stopped'\r\n\t}\r\n\t\r\n\tConvertFrom-Csv $operator|%{$null=Set-Serviced -serviceName $_.serviceName -startType $startType;Set-Serviced -serviceName $_.serviceName -status $status}|%{If(!$_.EndsWith('%%SMP:success')){$err++}$msg+=$_;}\r\n\t\r\n\tIf($err -eq 0){$isSuccess='true'}Else{$isSuccess='false'}\r\n\t$t=($msg -join ' ; ').replace('\\','/');\r\n\t\"{`\"isSuccess`\":`\"$isSuccess`\",`\"msg`\":`\"$t`\"}\"\r\n};Filter Set-ServicedF{\r\n\tReturn Set-Serviced $_.serviceName $_.startType $_.status\r\n};Function Set-Serviced([String]$serviceName,[String]$startType,[String]$status){\r\n\t$business=\"[Set-Serviced $serviceName]=>>\"\r\n\tIf([String]::IsNullOrEmpty($serviceName)){Return \"$business The serviceName can not empty\"}\r\n\t$service=Get-Service $serviceName -ErrorAction SilentlyContinue;\r\n\tIf(!$?){\r\n\t\tIf($error[0].ToString().Contains('Cannot find any service')){\r\n\t\t\tIf('Stopped' -eq $status){Return \"Cannot find any service with service name ${serviceName} %%SMP:success\"}\r\n\t\t}\r\n\t\tReturn Print-Exception \"${business}Get-Service $serviceName\"\r\n\t}\r\n\tIf(![String]::IsNullOrEmpty($status) -And $service.status -ne $status){\r\n\t\tIf('Running' -eq $service.status){\r\n\t\t\tStop-Service $serviceName -Force -ErrorAction SilentlyContinue;\r\n\t\t\tIf(!$?){Return Print-Exception \"Stop-Service $serviceName -Force\"}\r\n\t\t}Else{\r\n\t\t\tStart-Service $serviceName -ErrorAction SilentlyContinue;\r\n\t\t\tIf(!$?){Return Print-Exception \"Start-Service $serviceName\"}\r\n\t\t}\r\n\t}\r\n\t#StartupType:[Boot|System|Automatic|Manual|Disabled],Status:[Running|Stopped|Paused]\r\n\tif(![String]::IsNullOrEmpty($startType) -And $service.StartType -ne $startType){\r\n\t\tSet-Service $serviceName -StartupType $startType -ErrorAction SilentlyContinue;\r\n\t\tIf(!$?){Return Print-Exception \"${business}Set-Service $serviceName -StartupType $startType\"}\r\n\t}\t\r\n\tReturn Ret-Success $business\r\n};Function Ret-Success([String] $business){\r\n\tReturn \"$business%%SMP:success\"\r\n};Function Print-Exception([String]$command){\r\n\tReturn \"execute Command [$command] Exception,The Exception is $($error[0])\"\r\n};<#\r\n!!以上代码均为固定模式,非专业人士不要修改!!\r\n!!以下代码为调度部分;调度部分用法如下\r\n不可修改部分:\r\n\tDisable-ServicedArr\"\t=>调度方法\r\n\t\"serviceName\" \t\t=>服务名导航字段\r\n可修改部分: \r\n\t服务名,用户可根据实际业务需要进行新增或删除\r\n功能:\r\n\t禁用指定服务操作\r\n格式: Disable-ServicedArr @( \"serviceName\",\"服务名1\",...,\"服务名n\" )\r\n#>\r\nDisable-ServicedArr @('serviceName','tvnserver','ftpsvc')",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
})
//------------------------------------------------------------------------------------------------------------
db.ComplianceItem.remove({"itemName" : "进程管理"})
db.ComplianceItem.save({
  "_id" : ObjectId("5eba4d0291135523981dec2b"),
  "itemName" : "进程管理",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.aggregation.terminal.complianceAction.domain.ComplianceItem"
})

db.complianceAction.remove({"itemId" : "5eba4d0291135523981dec2b"})
db.complianceAction.save({
  "_id" : ObjectId("5eba4d2a91135523981dec2d"),
  "itemId" : "5eba4d0291135523981dec2b",
  "category" : NumberInt(99),
  "name" : "进程:关闭",
  "templateName" : "Custom",
  "isTip" : true,
  "tipMessage" : "请手动关闭 XXX 进程",
  "script" : "Function Kill-ProcessdArr([Object[]]$operator){\r\n        $ErrorActionPreference='SilentlyContinue';\r\n        $msg=@();\r\n        ConvertFrom-Csv $operator|Set-ProcessdF|%{$msg+=$_}\r\n        Return Unified-Return $msg 'Kill-ProcessdArr'\r\n};Filter Set-ProcessdF{\r\n        Set-Processd -processName $_.processName -isRun ('true' -eq $_.isRun) -startFile $_.startFile -isClear ('true' -eq $_.isClear)\r\n};Function Set-Processd([String]$processName,[bool]$isRun,[String]$startFile,[bool]$isClear=$false){\r\n        $business=\"[Set-Processd $processName]=>>\"\r\n        If([String]::isNullOrEmpty($processName)){\r\n                Return \"${business}BusinessException:processName can not empty\"\r\n        }\r\n        $pro=Get-Process $processName -ErrorAction SilentlyContinue\r\n        If($isRun){\r\n                If($pro -ne $null){\r\n                        Return \"${business}No Need Operator%%SMP:success\"\r\n                }\r\n                If([String]::isNullOrEmpty($startFile)){\r\n                        Return \"${business}BusinessException:To start a process, The process startFile cannot be empty\"\r\n                }\r\n                \r\n                If(!(Test-Path $startFile)){\r\n                        Return \"${business}BusinessException:[$startFile] does not exist,cannot start process\"\r\n                }\r\n                \r\n                Start-Process $startFile\r\n                If(!$?){Return Print-Exception \"${business}Start-Process $startFile\"}\r\n                Return Ret-Success $business\r\n        }Else{\r\n                If($pro -eq $null){\r\n                        If($isClear){\r\n                                If([String]::isNullOrEmpty($startFile)){\r\n                                        Return \"${business}BusinessException:To clean up a process, The process startFile cannot be empty\"\r\n                                }\r\n                                rm -Force $startFile -ErrorAction SilentlyContinue\r\n                                If(!$?){Return Print-Exception \"${business}rm -Force $startFile\"}\r\n                        }\r\n                        Return \"${business}No Need Operator%%SMP:success\"\r\n                }\r\n                \r\n                $pro|Foreach{\r\n                        Stop-Process $_.Id -Force -ErrorAction SilentlyContinue\r\n                        If(!$?){Return Print-Exception \"Stop-Process $_.Id -Force\"}\r\n                }\r\n                Sleep 1\r\n                $pro=Get-Process $processName -ErrorAction SilentlyContinue\r\n                If($pro -ne $null){\r\n                        Return \"${business}BusinessException:Failed to terminate process\"\r\n                }\r\n                \r\n                If($isClear){\r\n                        If([String]::isNullOrEmpty($startFile)){\r\n                                Return \"${business}BusinessException:To start a process, The process startFile cannot be empty\"\r\n                        }\r\n                        \r\n                        If(!(Test-Path $startFile)){\r\n                                Return \"${business}BusinessException:[$startFile] does not exist,cannot start process\"\r\n                        }\r\n                        \r\n                        rm -Force $startFile -ErrorAction SilentlyContinue\r\n                        If(!$?){Return Print-Exception \"rm -Force $startFile\"}\r\n                }\r\n                Return Ret-Success $business\r\n        }\r\n};Function Ret-Success([String] $business){\r\n        Return \"$business%%SMP:success\"\r\n};Function Print-Exception([String]$command){\r\n        Return \"execute Command [$command] Exception,The Exception is $($error[0])\"\r\n};Function Unified-Return([Object[]]$msgs,[Parameter(Mandatory = $true)][String]$business){\r\n        If($msgs -eq $Null -Or $msgs.count -eq 0){\r\n                $isSuccess='false';\r\n                $msg='No message returned';\r\n        }Else{\r\n                If(($msgs[-1]).EndsWith('%%SMP:success')){\r\n                        $isSuccess='true';\r\n                }Else{\r\n                        $isSuccess='false';\r\n                }\r\n                $msg=($msgs -Join ';    ').replace('\\','/')\r\n        }\r\n        Return \"{`\"isSuccess`\":`\"$isSuccess`\",`\"msg`\":`\"$msg`\",`\"business`\":`\"$business`\"}\";\r\n};<#\r\n!!以上代码均为固定模式,非专业人士不要修改!!\r\n!!以下代码为调度部分;调度部分用法如下\r\n不可修改部分:\r\n        \"Set-ProcessdArr\"       =>调度方法\r\n        \"processName\"           =>进程名 导航字段\r\n可修改部分: \r\n        进程名,用户可根据实际业务需要进行新增或删除\r\n功能:\r\n        杀死指定进程操作\r\n格式: Set-ProcessdArr @( \"processName\",\"进程名1\",...,\"进程名n\" )\r\n#>\r\nKill-ProcessdArr @(\"processName\",\"notepad++\",\"WeChat\")",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
})

//------------------------------------------------------------------------------------------------------------
db.ComplianceItem.remove({"itemName" : "加域管理"})
db.ComplianceItem.save({
  "_id" : ObjectId("5eba722291135523981dec37"),
  "itemName" : "加域检查",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.aggregation.terminal.complianceAction.domain.ComplianceItem"
})

db.complianceAction.remove({"itemId" : "5eba722291135523981dec37"})
db.complianceAction.save({
  "_id" : ObjectId("5eba722c91135523981dec39"),
  "itemId" : "5eba722291135523981dec37",
  "category" : NumberInt(99),
  "name" : "加域检查:开启",
  "templateName" : "Custom",
  "isTip" : true,
  "tipMessage" : "请手动完成加域",
  "script" : "Function Check-JoinAD(){\r\n\t$IsJoinAD=(Get-WmiObject Win32_ComputerSystem).PartOfDomain\r\n\tIf($IsJoinAD){\r\n\t\t\"{`\"isSuccess`\":`\"true`\"}\"\r\n\t}else{\r\n\t\t\"{`\"isSuccess`\":`\"false`\"}\"\r\n\t}\r\n};Check-JoinAD",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
})

db.ComplianceItem.remove({"itemName" : "wifi代理软件管理"})
db.ComplianceItem.save({
  "_id" : ObjectId("5ebe5b8891135530201007d3"),
  "itemName" : "wifi代理软件管理",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.aggregation.terminal.complianceAction.domain.ComplianceItem"
})

db.complianceAction.remove({"itemId" : "5ebe5b8891135530201007d3"})
db.complianceAction.save({
  "_id" : ObjectId("5ec36d30911355504c1ce47b"),
  "itemId" : "5ebe5b8891135530201007d3",
  "category" : NumberInt(99),
  "name" : "wifi代理软件:禁用",
  "templateName" : "Custom",
  "isTip" : true,
  "tipMessage" : "请手动卸载wifi代理软件",
  "script" : "Function Uninstall-SoftwareArr($hostUrl,$softwares){\r\n        $suc=0;\r\n        $res=1|Select isSuccess,msg,business;\r\n        ConvertFrom-Csv $softwares|%{\r\n                $ret=Black-Software $hostUrl (UnicodeToChinese $_.softwareName);$res.msg+=\"     $($_) :$ret\";\r\n                If(Is-Success $ret){$suc+=1}\r\n        }\r\n        $res.isSuccess=$suc -eq ($softwares.length-1);\r\n        $res.business='Uninstall-SoftwareArr';\r\n        Return ConvertToJson $res\r\n};Function Black-Software{\r\n\tparam(\r\n\t\t[String] $hostUrl,\r\n\t\t[String] $softwareName,\r\n\t\t[String] $softwareVersion,\r\n\t\t[bool] $isAuto =$true,\r\n\t\t[String] $processName,\r\n\t\t[String] $serviceName\r\n\t);\r\n\t$business=\"[uninstall $softwareName]=>>\";\r\n\tIf([String]::isNullOrEmpty($softwareName)){Return \"BusinessException:softwareName can not empty\"}\r\n\t\r\n\t$retVal=Get-SoftwareInfoByNameVersion $softwareName $softwareVersion;\r\n\tIf($retVal -eq $null){Return Ret-Success \"${business}There is no software named $softwareName in the system\"}\r\n\r\n\tIf([String]::isNullOrEmpty($retVal.UninstallString)){Return \"BusinessException:Uninstall command does not exist, unable to uninstall\"}\r\n\r\n\tIf(![String]::isNullOrEmpty($serviceName)){(Set-Serviced $serviceName 'Disabled' 'Stopped')|Foreach{\"$business$_\"}}\r\n\r\n\tIf(![String]::isNullOrEmpty($processName)){(Set-Processd $processName $False $startFileDir $True)|Foreach{\"$business$_\"}}\r\n\r\n\t$UninstallString=$retVal.UninstallString.Trim().ToLower();\r\n\t$iexe='msiexec.exe';\r\n\tIf($UninstallString.StartsWith($iexe)){\r\n\t\t$msicode=$UninstallString.substring($UninstallString.indexof('{'));\r\n\t\tIf($isAuto){$pra=\"/quiet\"}Else{$pra=''}\r\n\t\tInvoke-Expression \"$iexe /x `\"$msicode`\" /norestart $pra\" -ErrorAction SilentlyContinue\r\n\t\tIf(!$?){Return Print-Exception 'Invoke-Expression \"'+\"$iexe\"+ ' /x `\"'+\"$msicode\"+'`\" /norestart /quiet\"'}\r\n\t\tSleep 1\r\n\t}Else{OperatorSoftwareBySWI $hostUrl $UninstallString $isAuto}\r\n\r\n\tIf((Get-SoftwareInfoByNameVersion $softwareName $softwareVersion) -ne $null){Return \"BusinessException:Uninstallation has not been successful\"}\r\n\tReturn Ret-Success $business\r\n};Function Ret-Success([String] $business){\r\n        Return \"$business%%SMP:success\"\r\n};Function Is-Success($Ret){\r\n        If($Ret -ne $null -And ($Ret|Select -Last 1).EndsWith('%%SMP:success')){Return $True}\r\n        Return $False\r\n};Function Print-Exception([String]$command){\r\n        Return \"execute Command [$command] Exception,The Exception is $($error[0])\"\r\n};Function Set-Serviced([String]$serviceName,[String]$startType,[String]$status){\r\n        $business=\"[Set-Serviced $serviceName]=>>\"\r\n        If([String]::IsNullOrEmpty($serviceName)){Return \"$business The serviceName can not empty\"}\r\n        $service=Get-Service $serviceName -ErrorAction SilentlyContinue;\r\n        If(!$?){\r\n                If($error[0].ToString() -like '*Cannot find any service*'){\r\n                        If('Stopped' -eq $status){Return \"Cannot find any service with service name ${serviceName} %%SMP:success\"}\r\n                }\r\n                Return Print-Exception \"${business}Get-Service $serviceName\"\r\n        }\r\n        #StartupType:[Boot|System|Automatic|Manual|Disabled],Status:[Running|Stopped|Paused]\r\n        if(![String]::IsNullOrEmpty($startType) -And $service.StartType -ne $startType){\r\n                Set-Service $serviceName -StartupType $startType -ErrorAction SilentlyContinue;\r\n        }\r\n        If(![String]::IsNullOrEmpty($status) -And $service.status -ne $status){\r\n                If('Running' -eq $service.status){\r\n                        Stop-Service $serviceName -Force -ErrorAction SilentlyContinue;\r\n                        If(!$?){Return Print-Exception \"Stop-Service $serviceName -Force\"}\r\n                }Else{\r\n                        Start-Service $serviceName -ErrorAction SilentlyContinue;\r\n                        If(!$?){Return Print-Exception \"Start-Service $serviceName\"}\r\n                }\r\n        }\r\n        Return Ret-Success $business\r\n};Function Set-Processd([String]$processName,[bool]$isRun,[String]$startFile,[bool]$isClear=$false){\r\n        $business=\"[Set-Processd $processName]=>>\"\r\n        If([String]::isNullOrEmpty($processName)){\r\n                Return \"${business}BusinessException:processName can not empty\"\r\n        }\r\n        $pro=Get-Process $processName -ErrorAction SilentlyContinue\r\n        If($isRun){\r\n                If($pro -ne $null){\r\n                        Return \"${business}No Need Operator%%SMP:success\"\r\n                }\r\n                If([String]::isNullOrEmpty($startFile)){\r\n                        Return \"${business}BusinessException:To start a process, The process startFile cannot be empty\"\r\n                }\r\n                \r\n                If(!(Test-Path $startFile)){\r\n                        Return \"${business}BusinessException:[$startFile] does not exist,cannot start process\"\r\n                }\r\n                \r\n                Start-Process $startFile\r\n                If(!$?){Return Print-Exception \"${business}Start-Process $startFile\"}\r\n                Return Ret-Success $business\r\n        }Else{\r\n                If($pro -eq $null){\r\n                        If($isClear){\r\n                                If([String]::isNullOrEmpty($startFile)){\r\n                                        Return \"${business}BusinessException:To clean up a process, The process startFile cannot be empty\"\r\n                                }\r\n                                rm -Force $startFile -ErrorAction SilentlyContinue\r\n                                If(!$?){Return Print-Exception \"${business}rm -Force $startFile\"}\r\n                        }\r\n                        Return \"${business}No Need Operator%%SMP:success\"\r\n                }\r\n                \r\n                $pro|Foreach{\r\n                        Stop-Process $_.Id -Force -ErrorAction SilentlyContinue\r\n                        If(!$?){Return Print-Exception \"Stop-Process $_.Id -Force\"}\r\n                }\r\n                Sleep 1\r\n                $pro=Get-Process $processName -ErrorAction SilentlyContinue\r\n                If($pro -ne $null){\r\n                        Return \"${business}BusinessException:Failed to terminate process\"\r\n                }\r\n                \r\n                If($isClear){\r\n                        If([String]::isNullOrEmpty($startFile)){\r\n                                Return \"${business}BusinessException:To start a process, The process startFile cannot be empty\"\r\n                        }\r\n                        \r\n                        If(!(Test-Path $startFile)){\r\n                                Return \"${business}BusinessException:[$startFile] does not exist,cannot start process\"\r\n                        }\r\n                        \r\n                        rm -Force $startFile -ErrorAction SilentlyContinue\r\n                        If(!$?){Return Print-Exception \"rm -Force $startFile\"}\r\n                }\r\n                Return Ret-Success $business\r\n        }\r\n};Function Get-SoftwareInfoByNameVersion([String] $name,[String] $version){\r\n        $Key='Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall','SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall';\r\n        If([IntPtr]::Size -eq 8){$Key+='SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall'}\r\n        Foreach($_ In $Key){\r\n          $Hive='LocalMachine';\r\n          If('Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall' -ceq $_){$Hive='CurrentUser'}\r\n          $RegHive=[Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($Hive,$env:COMPUTERNAME);\r\n          $RegKey=$RegHive.OpenSubKey($_);\r\n          If([string]::IsNullOrEmpty($RegKey)){Continue}\r\n          $arrs=$RegKey.GetSubKeyNames();\r\n          Foreach($_ In $arrs){\r\n                $SubKey=$RegKey.OpenSubKey($_);\r\n                $tmp=$subkey.GetValue('DisplayName');\r\n                If(![string]::IsNullOrEmpty($tmp)){\r\n                        $tmp=$tmp.Trim();\r\n                        If($tmp.gettype().name -eq 'string' -And $tmp -like $name){\r\n                                $DisplayVersion=$subkey.GetValue('DisplayVersion');\r\n                                If(![string]::IsNullOrEmpty($version) -and $version -notlike $DisplayVersion){Continue}\r\n                                $retVal=''|Select 'DisplayName','DisplayVersion','UninstallString','InstallLocation','RegPath','InstallDate','InstallSource';\r\n                                $retVal.DisplayName=$subkey.GetValue('DisplayName');\r\n                                $retVal.DisplayVersion=$DisplayVersion;\r\n                                $retVal.UninstallString=$subkey.GetValue('UninstallString');\r\n                                $retVal.InstallLocation=$subkey.GetValue('InstallLocation');\r\n                                $retVal.RegPath=$subkey.GetValue('RegPath');\r\n                                $retVal.InstallDate=$subkey.GetValue('InstallDate');\r\n                                $retVal.InstallSource=$subkey.GetValue('InstallSource');\r\n                                Return $retVal;\r\n                        }\r\n                }\r\n                $SubKey.Close()\r\n          };\r\n          $RegHive.Close()\r\n        };\r\n};Function OperatorSoftwareBySWI([String]$hostUrl,[String]$softwarePath,$isSilent=$True){\r\n        If([String]::IsNullOrEmpty(\"$softwarePath\")){\r\n                Return \"uninstall script not exist\"\r\n        }\r\n        If($softwarePath.StartsWith('\"')){$softwarePath=$softwarePath.substring(1,$softwarePath.LastIndexOf('\"')-1).trim()}\r\n        If(!$softwarePath.EndsWith(\".exe\") -And !$softwarePath.EndsWith(\".exe`\"\")){\r\n                Return \"uninstall script format error[$softwarePath]\"\r\n        }\r\n        \r\n        $business=\"[OperatorSoftwareBySWI:$softwarePath]=>>\"\r\n        $SWIDir=Join-Path $env:SystemRoot 'System32'\r\n        If(!(Test-Path $SWIDir)){\r\n                mkdir $SWIDir -Force|Out-Null;\r\n                If(!$?){Return Print-Exception \"${business}mkdir $SWIDir -Force|Out-Null\"}\r\n        }\r\n        \r\n        If([IntPtr]::Size -eq 8){$SWIFileName='SWIService64.exe'}Else{$SWIFileName='SWIService.exe'}\r\n        $SWIPath=Join-Path $SWIDir $SWIFileName\r\n        If((Check-DownloadFileIsComplete $SWIPath).isComplete){\r\n                If([String]::IsNullOrEmpty($hostUrl)){Return \"When downloading the installation package, the host address cannot be empty\"}\r\n                $remoteexePath=\"$hostUrl/$SWIFileName\"\r\n                $Res=Download-File \"$remoteexePath\" \"$SWIPath\";\"$business$Res\"\r\n                If(!(Is-Success $Res)){Return}\r\n        }\r\n        \r\n        If(!$isSilent){$p=''}Else{$p='/s'}\r\n        $SWIServiceName='SWIserv';\r\n        Restart-Service $SWIServiceName -ErrorAction SilentlyContinue;\r\n        If(!$?){\r\n                Try{\r\n                        If((gsv -Name $SWIServiceName -ErrorAction SilentlyContinue) -ne $null){sc.exe delete $SWIServiceName}\r\n                        cd $SWIDir;\r\n                        iex \".\\$SWIFileName  -install -ErrorAction Stop\"\r\n                }Catch{\r\n                        Print-Exception \"${business}Restart-Service -Name $SWIServiceName\"\r\n                        If($p){start $softwarePath -ArgumentList @($p) -ErrorAction SilentlyContinue}Else{start $softwarePath -ErrorAction SilentlyContinue}\r\n                        If(!$?){Return Print-Exception \"start $softwarePath -ArgumentList @($p)\"}Else{Ret-Success $business}\r\n                }\r\n        }\r\n         \r\n        spsv -Name $SWIServiceName -ErrorAction SilentlyContinue;\r\n        If(!$?){Return Print-Exception \"${business}spsv -Name $SWIServiceName\"}\r\n        \r\n        Try{\r\n                (gsv -Name $SWIServiceName).Start(\"{`\"exe`\":`\"$softwarePath`\",`\"arg`\":`\"$p`\"}\")\r\n        }Catch{\r\n                Return Print-Exception \"${business}(gsv -Name $SWIServiceName).Start(\"+'\"{`\"exe`\":'+\"$softwarePath\"+',`\"arg`\":`\"/s`\"}\")'\r\n        }\r\n        Return Ret-Success $business\r\n};Function Download-File([String]$src,[String]$des,[bool]$isReplace=$false){\r\n        If([String]::IsNullOrEmpty($src)){Return \"BusinessException:Source file does not exist\"}\r\n        If([String]::IsNullOrEmpty($des)){Return \"BusinessException:Destination address cannot be empty\"}\r\n        $res=Check-DownloadFileIsComplete $des\r\n        If($res.isComplete){Return Ret-Success \"Download-File:No Need Operator\"}\r\n        while (Test-FileLocked $des){\r\n                sleep 1\r\n                If($i++ -gt 1){Return \"File [$des] is in use\"}\r\n        }\r\n        Try{\r\n                $web=New-Object System.Net.WebClient\r\n                $web.Encoding=[System.Text.Encoding]::UTF8\r\n                $web.DownloadFile(\"$src\", \"$des\")\r\n                If(!(Test-Path $des) -or (Get-Content \"$des\" -totalcount 1) -eq $null){Return \"BusinessException:The downloaded file does not exist or the content is empty\"}\r\n                If([String]::IsNullOrEmpty($res.endFilePath)){$res=Check-DownloadFileIsComplete $des}\r\n                New-Item -Path $res.endFilePath -ItemType \"file\"|Out-Null\r\n        }Catch{Return Print-Exception \"$web.DownloadFile($src,$des)\"}\r\n        Return Ret-Success \"Download-File\"\r\n};Function Test-FileLocked([string]$FilePath) {\r\n    try {[IO.File]::OpenWrite($FilePath).close();$false}catch{$true}\r\n};Function Check-DownloadFileIsComplete($FilePath){\r\n        $isComplete=$false\r\n        If(Test-Path $FilePath){\r\n                $file=gi $FilePath\r\n                $endFilePath=Join-Path $file.DirectoryName \"$($file.basename)_end\"\r\n                If(Test-Path $endFilePath){$isComplete=$true}\r\n        }\r\n        Return New-Object PSObject -Property @{isComplete=$isComplete;endFilePath=$endFilePath;filePath=$FilePath}\r\n};Function UnicodeToChinese([String]$sourceStr){\r\n        [regex]::Replace($sourceStr,'\\\\u[0-9-a-f]{4}',{param($v);[char][int]($v.Value.replace('\\u','0x'))})\r\n};Function ConvertToJson{\r\n        param($InputObject);\r\n        if($InputObject -is [string]){\r\n                if(![String]::isNullOrEmpty($InputObject)){$InputObject=$InputObject.replace('\\','/').trim()}\r\n                \"`\"{0}`\"\" -f $InputObject\r\n        }elseif($InputObject -is [bool]){\r\n                $InputObject.ToString().ToLower();\r\n        }elseif($InputObject -eq $null){\r\n                \"null\"\r\n        }elseif($InputObject -is [pscustomobject]){\r\n                $result=\"{\";\r\n                $properties=$InputObject|Get-Member -MemberType NoteProperty|ForEach-Object{\r\n                        if(![String]::isNullOrEmpty($_.Name)){\"`\"{0}`\":{1}\" -f  $_.Name,(ConvertToJson $InputObject.($_.Name))}\r\n                };\r\n                $result+=$properties -join \",\";\r\n                $result+=\"}\";\r\n                $result\r\n        }elseif($InputObject -is [hashtable]){\r\n                $result=\"{\";\r\n                $properties=$InputObject.Keys|ForEach-Object{\r\n                        if(![String]::isNullOrEmpty($_)){\"`\"{0}`\":{1}\" -f  $_,(ConvertToJson $InputObject[$_])}\r\n                };\r\n                $result+=$properties -join \",\";\r\n                $result+=\"}\";\r\n                $result\r\n        }elseif($InputObject -is [array]){\r\n                $result=\"[\";\r\n                $items=@();\r\n                for($i=0;$i -lt $InputObject.length;$i++){\r\n                        if(![String]::isNullOrEmpty($InputObject[$i])){$items+=ConvertToJson $InputObject[$i]}\r\n                        \r\n                }\r\n                $result+=$items -join \",\";\r\n                $result+=\"]\";\r\n                $result\r\n        }else{\r\n                \"`\"{0}`\"\" -f $InputObject.ToString().trim()\r\n        }\r\n};\r\n<#\r\n!!以上代码均为固定模式,非专业人士不要修改!!\r\n!!以下代码为调度部分;调度部分用法如下\r\n不可修改部分:\r\n        \"Uninstall-SoftwareArr\" =>调度方法\r\n        \"softwareName\"          =>软件名导航字段\r\n可修改部分: \r\n        软件名,用户可根据实际业务需要进行新增或删除,若软件名为空中文,请先将其换成Unicode编码,以规避不同系统环境乱码并导致无法正常执行\r\n        $hostUrl 应修改为软件安装包的下载地址\r\n功能:\r\n        卸载wifi代理工具\r\n格式: Uninstall-SoftwareArr $hostUrl @( \"softwareName\" ,\"软件名1\",...,\"软件名n\" )\r\n#>\r\n#Uninstall-SoftwareArr \"http://172.17.8.56:9888/nodeManager/file/download/\" @(\"softwareName\",\"360免费WiFi\",\"猎豹免费WIFI\",\"WiFi共享大师\")\r\nUninstall-SoftwareArr \"http://172.17.8.56:9888/nodeManager/file/download/\" @(\"softwareName\",\"360\\u514d\\u8d39WiFi\",\"\\u730e\\u8c79\\u514d\\u8d39WIFI\",\"WiFi\\u5171\\u4eab\\u5927\\u5e08\")",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
})

db.ComplianceItem.remove({"itemName" : "多网卡"})
db.ComplianceItem.save({
  "_id" : ObjectId("5ed4b4e0853d8d23ac2c33c8"),
  "itemName" : "多网卡",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.aggregation.terminal.complianceAction.domain.ComplianceItem"
})

db.complianceAction.remove({"itemId" : "5ed4b4e0853d8d23ac2c33c8"})
db.complianceAction.save({
  "_id" : ObjectId("5ed4b5bd853d8d23ac2c33c9"),
  "itemId" : "5ed4b4e0853d8d23ac2c33c8",
  "category" : NumberInt(99),
  "name" : "多网卡:禁用",
  "templateName" : "Custom",
  "isTip" : true,
  "tipMessage" : "请手动禁用网卡，使其仅保留一个可上网",
  "script" : "Function Unified-Return([Object[]]$msgs,[Parameter(Mandatory = $true)][String]$business){\r\n\tIf($msgs -eq $Null -Or $msgs.count -eq 0){\r\n\t\t$isSuccess='false';\r\n\t\t$msg='No message returned';\r\n\t}Else{\r\n\t\tIf(($msgs[-1]).EndsWith('%%SMP:success')){\r\n\t\t\t$isSuccess='true';\r\n\t\t}Else{\r\n\t\t\t$isSuccess='false';\r\n\t\t}\r\n\t\t$msg=($msgs -Join ';\t').replace('\\','/')\r\n\t}\r\n\tReturn \"{`\"isSuccess`\":`\"$isSuccess`\",`\"msg`\":`\"$msg`\",`\"business`\":`\"$business`\"}\";\r\n}\r\n\r\nFunction Check-MultipleNetworlCard{\r\n\t$netAdpter=Get-WmiObject -Class win32_networkadapter |?{$_.NetEnabled -eq $true -and $_.serviceName -ne 'VMnetAdapter'}|Select Name,MACAddress,NetEnabled,ServiceName\r\n\t#Name,AdapterType,AdapterTypeId,Description,MACAddress,Manufacturer,NetEnabled,PhysicalAdapter,PNPDeviceID,ServiceName,NetConnectionID\r\n\tIf($netAdpter -ne $null -And $netAdpter.count -gt 1){\r\n\t\tReturn \"Currently, the network card information available on the Internet is {$netAdpter}\",\"There are multiple network cards on the terminal to access the Internet\"\r\n\t}\r\n\tReturn \"Currently, the network card information available on the Internet is {$netAdpter}\",\"%%SMP:success\"\r\n}\r\n$msgs=Check-MultipleNetworlCard\r\nUnified-Return -msgs $msgs -business 'Check-MultipleNetworlCard'",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
})

db.ComplianceItem.remove({"itemName" : "杀毒软件"})
db.ComplianceItem.save({
  "_id" : ObjectId("5eec260c91135503d8584d74"),
  "itemName" : "杀毒软件",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.aggregation.terminal.complianceAction.domain.ComplianceItem"
})

db.complianceAction.remove({"itemId" : "5eec260c91135503d8584d74"})
db.complianceAction.save({
  "_id" : ObjectId("5eec254f91135503d8584d6c"),
  "itemId" : "5eec260c91135503d8584d74",
  "category" : NumberInt(99),
  "name" : "安装杀毒软件:开启",
  "templateName" : "Custom",
  "isTip" : true,
  "tipMessage" : "该系统未安装指定杀毒软件(金山毒霸,360杀毒),系统默认推送360杀毒",
  "script" : "Function White-Software{\r\n\tparam([String] $hostUrl,\r\n\t\t[String] $softwareName,\r\n\t\t[String] $softwareVersion64,\r\n\t\t[String] $fileName64,\r\n\t\t[String] $softwareVersion32,\r\n\t\t[String] $fileName32\r\n\t);\r\n\tIf([String]::isNullOrEmpty($softwareName)){Return \"BusinessException:softwareName can not empty\"}\r\n\tIf([String]::isNullOrEmpty($hostUrl)){Return \"BusinessException:hostUrl can not empty\"}\r\n\tIf([String]::isNullOrEmpty($fileName64) -and [String]::isNullOrEmpty($fileName32)){Return \"BusinessException:install package can not empty\"}\r\n\r\n\t$downloadPath = Join-Path $env:SystemDrive '/Program Files/Ruijie Networks/softwarePackage/';\r\n\tIf(!(Test-Path $downloadPath)){mkdir $downloadPath -Force|Out-Null}\r\n\tIf([IntPtr]::Size -eq 8 -and ![String]::isNullOrEmpty($fileName64)){\r\n\t\t$softwareVersion=$softwareVersion64;\r\n\t\t$bit='bit64';\r\n\t\t$fileName=$fileName64;\r\n\t}Else{\r\n\t\t$softwareVersion=$softwareVersion32;\r\n\t\t$bit='bit32';\r\n\t\t$fileName=$fileName32\r\n\t}\r\n\tIf((Get-SoftwareInfoByNameVersion $softwareName $softwareVersion) -ne $null){Return Ret-Success \"${softwareName} has been installed\"}\r\n\t$softwarePath = Join-Path $downloadPath $fileName;\r\n\tIf(!(Test-Path \"$softwarePath\") -or (Get-Content \"$softwarePath\" -TotalCount 1) -eq $null){\r\n\t\t$tmp=Handle-SpecialCharactersOfHTTP \"?fileName=$fileName&dir=win/$bit\";\r\n\t\t$remoteSoftwarePath=$hostUrl+'/temp'+$tmp;\r\n\t\t$Res=Download-File \"$remoteSoftwarePath\" \"$softwarePath\";\"$Res\";\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\t\r\n\t$file=ls $softwarePath;\r\n\t$Suffix=$file.Extension.substring(1);\r\n\tIf($null -ne (Get-Process|?{$_.name -eq $file.baseName -And ($_.path -eq $null -Or $_.path -eq $softwarePath)})){Return \"$($file.name) is Installing\"}\r\n\tIf('msi' -eq $Suffix){\r\n\t\t$os=Get-WmiObject -Class Win32_OperatingSystem | Select -ExpandProperty Caption\r\n\t\tIf($os -Like '*Windows 7*' -Or $os -Like '*Windows 8*'){\r\n\t\t\tInvoke-Expression \"& cmd /c `'msiexec.exe /i `\"$softwarePath`\"`' /qn ADVANCED_OPTIONS=1 CHANNEL=100\"\r\n\t\t}Else{\r\n\t\t\tInvoke-Expression \"Msiexec /i `\"$softwarePath`\" /norestart /qn\" -ErrorAction SilentlyContinue;\r\n\t\t\tIf(!$?){Return Print-Exception \"Msiexec /i `\"$softwarePath`\" /norestart /qn\"}\r\n\t\t}\r\n\t}else{\r\n\t\t$Res=OperatorSoftwareBySWI $hostUrl $softwarePath;\"$Res\";\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\t\r\n\tIf((Get-SoftwareInfoByNameVersion $softwareName $softwareVersion) -eq $null){Return \"BusinessException:Installation of the software has not been successful\"}\r\n\tReturn Ret-Success \r\n};Function Ret-Success([String] $business){\r\n\tReturn \"$business%%SMP:success\"\r\n};Function Is-Success($Ret){\r\n\tIf($Ret -ne $null -And ($Ret|Select -Last 1).EndsWith('%%SMP:success')){Return $True}\r\n\tReturn $False\r\n};Function Print-Exception([String]$command){\r\n\tReturn \"execute Command [$command] Exception,The Exception is $($error[0])\"\r\n};Function Download-File([String]$src,[String]$des,[bool]$isReplace=$false){\r\n\tIf([String]::IsNullOrEmpty($src)){Return \"BusinessException:Source file does not exist\"}\r\n\tIf([String]::IsNullOrEmpty($des)){Return \"BusinessException:Destination address cannot be empty\"}\r\n\tIf(Test-Path $des){\r\n\t\twhile (Test-FileLocked $des){\r\n\t\t\tsleep 1;\r\n\t\t\tIf($i++ -gt 1){Return \"File [$des] is in use\"}\r\n\t\t}\r\n\t\t$file=ls $des;\r\n\t\tIf(Test-Path ($file.DirectoryName+\"/\"+$file.basename+\"_end\")){Return Ret-Success \"Download-File:No Need Operator\"}\r\n\t}\r\n\tTry{\r\n\t\t$web=New-Object System.Net.WebClient;\r\n\t\t$web.Encoding=[System.Text.Encoding]::UTF8;\r\n\t\t$web.DownloadFile(\"$src\", \"$des\");\r\n\t\t$file=(ls $des);\r\n\t\t$endFile=$file.basename+\"_end\";\r\n\t\tNew-Item -Path $file.DirectoryName -Name $endFile -ItemType \"file\" |Out-Null\r\n\t\tIf(!(Test-Path $des) -or (Get-Content \"$des\" -totalcount 1) -eq $null){Return \"BusinessException:The downloaded file does not exist or the content is empty\"}\r\n\t}Catch{Return Print-Exception \"$web.DownloadFile($src,$des)\"}\r\n\tReturn Ret-Success \"Download-File\"\r\n};Function Test-FileLocked([string]$FilePath) {\r\n    try {[IO.File]::OpenWrite($FilePath).close();$false}catch{$true}\r\n};Function Get-SoftwareInfoByNameVersion([String] $name,[String] $version){\r\n\t$Key='Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall','SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall';\r\n\tIf([IntPtr]::Size -eq 8){$Key+='SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall'}\r\n\tForeach($_ In $Key){\r\n\t  $Hive='LocalMachine';\r\n\t  If('Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall' -ceq $_){$Hive='CurrentUser'}\r\n\t  $RegHive=[Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($Hive,$env:COMPUTERNAME);\r\n\t  $RegKey=$RegHive.OpenSubKey($_);\r\n\t  If([string]::IsNullOrEmpty($RegKey)){Continue}\r\n\t  $arrs=$RegKey.GetSubKeyNames();\r\n\t  Foreach($_ In $arrs){\r\n\t\t$SubKey=$RegKey.OpenSubKey($_);\r\n\t\t$tmp=$subkey.GetValue('DisplayName');\r\n\t\tIf(![string]::IsNullOrEmpty($tmp)){\r\n\t\t\t$tmp=$tmp.Trim();\r\n\t\t\tIf($tmp.gettype().name -eq 'string' -And $tmp -like $name){\r\n\t\t\t\t$DisplayVersion=$subkey.GetValue('DisplayVersion');\r\n\t\t\t\tIf(![string]::IsNullOrEmpty($version) -and $version -notlike $DisplayVersion){Continue}\r\n\t\t\t\t$retVal=''|Select 'DisplayName','DisplayVersion','UninstallString','InstallLocation','RegPath','InstallDate','InstallSource';\r\n\t\t\t\t$retVal.DisplayName=$subkey.GetValue('DisplayName');\r\n\t\t\t\t$retVal.DisplayVersion=$DisplayVersion;\r\n\t\t\t\t$retVal.UninstallString=$subkey.GetValue('UninstallString');\r\n\t\t\t\t$retVal.InstallLocation=$subkey.GetValue('InstallLocation');\r\n\t\t\t\t$retVal.RegPath=$subkey.GetValue('RegPath');\r\n\t\t\t\t$retVal.InstallDate=$subkey.GetValue('InstallDate');\r\n\t\t\t\t$retVal.InstallSource=$subkey.GetValue('InstallSource');\r\n\t\t\t\tReturn $retVal;\r\n\t\t\t}\r\n\t\t}\r\n\t\t$SubKey.Close()\r\n\t  };\r\n\t  $RegHive.Close()\r\n\t};\r\n};Function OperatorSoftwareBySWI([String]$hostUrl,[String]$softwarePath,$isSilent=$True){\r\n\t$business=\"[OperatorSoftwareBySWI:$softwarePath]=>>\"\r\n\tIf([String]::IsNullOrEmpty(\"$softwarePath\")){\r\n\t\tReturn \"uninstall script not exist\"\r\n\t}\r\n\tIf(!$softwarePath.EndsWith(\".exe\") -And !$softwarePath.EndsWith(\".exe`\"\")){\r\n\t\tReturn \"uninstall script format error[$softwarePath]\"\r\n\t}\r\n\tIf($softwarePath.StartsWith('\"')){\r\n\t\t$softwarePath=$softwarePath.substring(1,$softwarePath.LastIndexOf('\"'))\r\n\t}\r\n\t$SWIDir=Join-Path $env:SystemDrive '\\Program Files\\Ruijie Networks\\softwarePackage';\r\n\tIf(!(Test-Path $SWIDir)){\r\n\t\tmkdir $SWIDir -Force|Out-Null;\r\n\t\tIf(!$?){Return Print-Exception \"${business}mkdir $SWIDir -Force|Out-Null\"}\r\n\t}\r\n\t$SWIFileName='SWIService.exe';\r\n\t$SWIPath=Join-Path $SWIDir $SWIFileName;\r\n\t$SWIServiceName='SWIserv';\r\n\t$SWI=Get-Service \"${SWIServiceName}\"\r\n\tIf (!(Test-Path \"$SWIPath\")){\r\n\t\tIf([String]::IsNullOrEmpty(\"$hostUrl\")){Return \"When downloading the installation package, the host address cannot be empty\"}\r\n\t\t$remoteexePath=$hostUrl +'/'+ $SWIFileName;\t\r\n\t\t$Res=Download-File \"$remoteexePath\" \"$SWIPath\";\"$business$Res\";\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\t\r\n\tIf($null -eq $SWI){\r\n\t\tTry{\r\n\t\t\tSet-Location $SWIDir; \r\n\t\t\t.\\SWIService.exe -install -ErrorAction Stop\r\n\t\t}Catch{\r\n\t\t\tReturn Print-Exception \"${business}.\\SWIService.exe -install -ErrorAction Stop\"\r\n\t\t}\r\n\t}else{\r\n\t\tIf($SWI.Status -eq 'Running'){\r\n\t\t\tStop-Service -Name $SWIServiceName -ErrorAction SilentlyContinue;\r\n\t\t\tIf(!$?){Return Print-Exception \"${business}Stop-Service -Name $SWIServiceName\"}\r\n\t\t}\r\n\t}\r\n\tTry{\r\n\t\t$p='/s'\r\n\t\tIf(!$isSilent){$p=''}\r\n\t\t(Get-Service -Name $SWIServiceName).Start(\"{`\"exe`\":`\"$softwarePath`\",`\"arg`\":`\"$p`\"}\")\r\n\t}Catch{\r\n\t\tReturn Print-Exception \"${business}(Get-Service -Name $SWIServiceName).Start(\"+'\"{`\"exe`\":'+\"$softwarePath\"+',`\"arg`\":`\"/s`\"}\")'\r\n\t}\r\n\tReturn Ret-Success ${business}\r\n};Function Handle-SpecialCharactersOfHTTP([String] $Characters){\r\n\tIf([String]::IsNullOrEmpty($Characters)){\r\n\t\tReturn $Null;\r\n\t}\r\n\t#[空格:%20 \":%22 #:%23 %:%25 &用%26 +:%2B ,:%2C /:%2F ::%3A ;:%3B <:%3C =:%3D >:%3E ?:%3F @:%40 \\:%5C |:%7C]\r\n\tReturn $Characters.replace(' ','%20').replace('+','%2B').replace('/','%2F').replace('(','%28').replace(')','%29')\r\n}\r\n\r\nFunction Unified-Return([Object[]]$msgs,[Parameter(Mandatory = $true)][String]$business){\r\n\tIf($msgs -eq $Null -Or $msgs.count -eq 0){\r\n\t\t$isSuccess='false';\r\n\t\t$msg='No message returned';\r\n\t}Else{\r\n\t\tIf(($msgs[-1]).EndsWith('%%SMP:success')){\r\n\t\t\t$isSuccess='true';\r\n\t\t}Else{\r\n\t\t\t$isSuccess='false';\r\n\t\t}\r\n\t\t$msg=($msgs -Join ';\t').replace('\\','/')\r\n\t}\r\n\tReturn \"{`\"isSuccess`\":`\"$isSuccess`\",`\"msg`\":`\"$msg`\",`\"business`\":`\"$business`\"}\";\r\n}\r\n\r\nFunction UnicodeToChinese([String]$sourceStr){\r\n\t[regex]::Replace($sourceStr,'\\\\u[0-9-a-f]{4}',{param($v);[char][int]($v.Value.replace('\\u','0x'))})\r\n}\r\n\r\nFunction Install-SDSotware([String] $hostUrl,$softwareName1,$softwareVersion1,$fileName1,$softwareName2,$softwareVersion2){\r\n\tIf((Get-SoftwareInfoByNameVersion $softwareName2 $softwareVersion2) -ne $null){\r\n\t\tUnified-Return (Ret-Success \"${softwareName2} has been installed\") 'Install-SDSotware'\r\n\t}Else{\r\n\t\tUnified-Return (White-Software -hostUrl $hostUrl -softwareName $softwareName1 -softwareVersion32 $softwareVersion1 -fileName32 $fileName1) 'Install-SDSotware'\r\n\t}\r\n}\r\n$sourceStr='Install-SDSotware -hostUrl \"http://10.255.0.68:9888/nodeManager/file/download/\" -softwareName1 \"\\u0033\\u0036\\u0030\\u6740\\u6bd2\" -softwareVersion1 \"5.0.0.8170\" -fileName1 \"360sd_x64_std_5.0.0.8170D.exe\"  -softwareName2 \"\\u91d1\\u5c71\\u6bd2\\u9738\" -softwareVersion2 \"2020.11.2.4\"'\r\nInvoke-Expression (UnicodeToChinese $sourceStr)",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
})
db.complianceAction.save({
  "_id" : ObjectId("5efeeaae91135502fc314079"),
  "itemId" : "5eec260c91135503d8584d74",
  "category" : NumberInt(99),
  "name" : "安装杀毒软件Top5任意1款,默认推送<360杀毒>:开启",
  "templateName" : "Custom",
  "isTip" : true,
  "tipMessage" : "该系统未安装指定杀毒软件(360杀毒、金山毒霸、瑞星杀毒、卡巴斯基、火绒),系统默认推送360杀毒",
  "script" : "Function White-Software{\r\n\tparam([String] $hostUrl,\r\n\t\t[String] $softwareName,\r\n\t\t[String] $softwareVersion64,\r\n\t\t[String] $fileName64,\r\n\t\t[String] $softwareVersion32,\r\n\t\t[String] $fileName32,\r\n\t\t[bool] $silent=$true\r\n\t);\r\n\tIf([String]::isNullOrEmpty($softwareName)){Return \"BusinessException:softwareName can not empty\"}\r\n\tIf([String]::isNullOrEmpty($hostUrl)){Return \"BusinessException:hostUrl can not empty\"}\r\n\tIf([String]::isNullOrEmpty($fileName64) -and [String]::isNullOrEmpty($fileName32)){Return \"BusinessException:install package can not empty\"}\r\n\r\n\t$downloadPath = Join-Path $env:SystemDrive '/Program Files/Ruijie Networks/softwarePackage/';\r\n\tIf(!(Test-Path $downloadPath)){mkdir $downloadPath -Force|Out-Null}\r\n\tIf([IntPtr]::Size -eq 8 -and ![String]::isNullOrEmpty($fileName64)){\r\n\t\t$softwareVersion=$softwareVersion64;\r\n\t\t$bit='bit64';\r\n\t\t$fileName=$fileName64;\r\n\t}Else{\r\n\t\t$softwareVersion=$softwareVersion32;\r\n\t\t$bit='bit32';\r\n\t\t$fileName=$fileName32\r\n\t}\r\n\tIf((Get-SoftwareInfoByNameVersion $softwareName $softwareVersion) -ne $null){Return Ret-Success \"${softwareName} has been installed\"}\r\n\t$softwarePath = Join-Path $downloadPath $fileName;\r\n\tIf(!(Test-Path \"$softwarePath\") -or (Get-Content \"$softwarePath\" -TotalCount 1) -eq $null){\r\n\t\t$tmp=Handle-SpecialCharactersOfHTTP \"?fileName=$fileName&dir=win/$bit\";\r\n\t\t$remoteSoftwarePath=$hostUrl+'/temp'+$tmp;\r\n\t\t$Res=Download-File \"$remoteSoftwarePath\" \"$softwarePath\";\"$Res\";\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\t\r\n\t$file=ls $softwarePath;\r\n\t$Suffix=$file.Extension.substring(1);\r\n\tIf($null -ne (Get-Process|?{$_.name -eq $file.baseName -And ($_.path -eq $null -Or $_.path -eq $softwarePath)})){Return \"$($file.name) is Installing\"}\r\n\t\r\n\tIf('msi' -eq $Suffix){\r\n\t\t$os=Get-WmiObject -Class Win32_OperatingSystem | Select -ExpandProperty Caption\r\n\t\tIf($os -Like '*Windows 7*' -Or $os -Like '*Windows 8*'){\r\n\t\t\tiex \"& cmd /c `'msiexec.exe /i `\"$softwarePath`\"`' /qn ADVANCED_OPTIONS=1 CHANNEL=100\"\r\n\t\t}Else{\r\n\t\t\tiex \"Msiexec /i `\"$softwarePath`\" /norestart /qn\" -ErrorAction SilentlyContinue;\r\n\t\t\tIf(!$?){Return Print-Exception \"Msiexec /i `\"$softwarePath`\" /norestart /qn\"}\r\n\t\t}\r\n\t}else{\r\n\t\t$Res=OperatorSoftwareBySWI $hostUrl $softwarePath $silent;\"$Res\";\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\tIf((Get-SoftwareInfoByNameVersion $softwareName $softwareVersion) -eq $null){Return \"BusinessException:Installation of the software has not been successful\"}\r\n\tReturn Ret-Success \r\n};Function Ret-Success([String] $business){\r\n\tReturn \"$business%%SMP:success\"\r\n};Function Is-Success($Ret){\r\n\tIf($Ret -ne $null -And ($Ret|Select -Last 1).EndsWith('%%SMP:success')){Return $True}\r\n\tReturn $False\r\n};Function Print-Exception([String]$command){\r\n\tReturn \"execute Command [$command] Exception,The Exception is $($error[0])\"\r\n};Function Download-File([String]$src,[String]$des,[bool]$isReplace=$false){\r\n\tIf([String]::IsNullOrEmpty($src)){Return \"BusinessException:Source file does not exist\"}\r\n\tIf([String]::IsNullOrEmpty($des)){Return \"BusinessException:Destination address cannot be empty\"}\r\n\tIf(Test-Path $des){\r\n\t\twhile (Test-FileLocked $des){\r\n\t\t\tsleep 1;\r\n\t\t\tIf($i++ -gt 1){Return \"File [$des] is in use\"}\r\n\t\t}\r\n\t\t$file=ls $des;\r\n\t\tIf(Test-Path ($file.DirectoryName+\"/\"+$file.basename+\"_end\")){Return Ret-Success \"Download-File:No Need Operator\"}\r\n\t}\r\n\tTry{\r\n\t\t$web=New-Object System.Net.WebClient;\r\n\t\t$web.Encoding=[System.Text.Encoding]::UTF8;\r\n\t\t$web.DownloadFile(\"$src\", \"$des\");\r\n\t\t$file=(ls $des);\r\n\t\t$endFile=$file.basename+\"_end\";\r\n\t\tNew-Item -Path $file.DirectoryName -Name $endFile -ItemType \"file\" |Out-Null\r\n\t\tIf(!(Test-Path $des) -or (Get-Content \"$des\" -totalcount 1) -eq $null){Return \"BusinessException:The downloaded file does not exist or the content is empty\"}\r\n\t}Catch{Return Print-Exception \"$web.DownloadFile($src,$des)\"}\r\n\tReturn Ret-Success \"Download-File\"\r\n};Function Test-FileLocked([string]$FilePath) {\r\n    try {[IO.File]::OpenWrite($FilePath).close();$false}catch{$true}\r\n};Function Get-SoftwareInfoByNameVersion([String] $name,[String] $version){\r\n\t$Key='Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall','SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall';\r\n\tIf([IntPtr]::Size -eq 8){$Key+='SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall'}\r\n\tForeach($_ In $Key){\r\n\t  $Hive='LocalMachine';\r\n\t  If('Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall' -ceq $_){$Hive='CurrentUser'}\r\n\t  $RegHive=[Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($Hive,$env:COMPUTERNAME);\r\n\t  $RegKey=$RegHive.OpenSubKey($_);\r\n\t  If([string]::IsNullOrEmpty($RegKey)){Continue}\r\n\t  $arrs=$RegKey.GetSubKeyNames();\r\n\t  Foreach($_ In $arrs){\r\n\t\t$SubKey=$RegKey.OpenSubKey($_);\r\n\t\t$tmp=$subkey.GetValue('DisplayName');\r\n\t\tIf(![string]::IsNullOrEmpty($tmp)){\r\n\t\t\t$tmp=$tmp.Trim();\r\n\t\t\tIf($tmp.gettype().name -eq 'string' -And $tmp -like $name){\r\n\t\t\t\t$DisplayVersion=$subkey.GetValue('DisplayVersion');\r\n\t\t\t\tIf(![string]::IsNullOrEmpty($version) -and $version -notlike $DisplayVersion){Continue}\r\n\t\t\t\t$retVal=''|Select 'DisplayName','DisplayVersion','UninstallString','InstallLocation','RegPath','InstallDate','InstallSource';\r\n\t\t\t\t$retVal.DisplayName=$subkey.GetValue('DisplayName');\r\n\t\t\t\t$retVal.DisplayVersion=$DisplayVersion;\r\n\t\t\t\t$retVal.UninstallString=$subkey.GetValue('UninstallString');\r\n\t\t\t\t$retVal.InstallLocation=$subkey.GetValue('InstallLocation');\r\n\t\t\t\t$retVal.RegPath=$subkey.GetValue('RegPath');\r\n\t\t\t\t$retVal.InstallDate=$subkey.GetValue('InstallDate');\r\n\t\t\t\t$retVal.InstallSource=$subkey.GetValue('InstallSource');\r\n\t\t\t\tReturn $retVal;\r\n\t\t\t}\r\n\t\t}\r\n\t\t$SubKey.Close()\r\n\t  };\r\n\t  $RegHive.Close()\r\n\t};\r\n};Function OperatorSoftwareBySWI([String]$hostUrl,[String]$softwarePath,$isSilent=$True){\r\n\t$business=\"[OperatorSoftwareBySWI:$softwarePath]=>>\"\r\n\tIf([String]::IsNullOrEmpty(\"$softwarePath\")){\r\n\t\tReturn \"uninstall script not exist\"\r\n\t}\r\n\tIf(!$softwarePath.EndsWith(\".exe\") -And !$softwarePath.EndsWith(\".exe`\"\")){\r\n\t\tReturn \"uninstall script format error[$softwarePath]\"\r\n\t}\r\n\tIf($softwarePath.StartsWith('\"')){\r\n\t\t$softwarePath=$softwarePath.substring(1,$softwarePath.LastIndexOf('\"'))\r\n\t}\r\n\t$SWIDir=Join-Path $env:SystemRoot 'System32';\r\n\tIf(!(Test-Path $SWIDir)){\r\n\t\tmkdir $SWIDir -Force|Out-Null;\r\n\t\tIf(!$?){Return Print-Exception \"${business}mkdir $SWIDir -Force|Out-Null\"}\r\n\t}\r\n\t\r\n\tIf([IntPtr]::Size -eq 8){$SWIFileName='SWIService64.exe'}Else{$SWIFileName='SWIService.exe';}\r\n\t$SWIPath=Join-Path $SWIDir $SWIFileName;\r\n\t$SWIServiceName='SWIserv';\r\n\tIf (!(Test-Path \"$SWIPath\")){\r\n\t\tIf([String]::IsNullOrEmpty(\"$hostUrl\")){Return \"When downloading the installation package, the host address cannot be empty\"}\r\n\t\t$remoteexePath=\"$hostUrl/$SWIFileName\";\r\n\t\t$Res=Download-File \"$remoteexePath\" \"$SWIPath\";\"$business$Res\";\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\t$SWI=gsv $SWIServiceName -ErrorAction SilentlyContinue\r\n\tIf($null -eq $SWI){\r\n\t\tTry{\r\n\t\t\tcd $SWIDir;\r\n\t\t\tiex \".\\$SWIFileName  -install -ErrorAction Stop\"\r\n\t\t}Catch{\r\n\t\t\tReturn Print-Exception \"${business}.\\SWIService.exe -install -ErrorAction Stop\"\r\n\t\t}\r\n\t}else{\r\n\t\tIf($SWI.Status -eq 'Running'){\r\n\t\t\tspsv -Name $SWIServiceName -ErrorAction SilentlyContinue;\r\n\t\t\tIf(!$?){Return Print-Exception \"${business}spsv -Name $SWIServiceName\"}\r\n\t\t}\r\n\t}\r\n\tTry{\r\n\t\t$p='/s'\r\n\t\tIf(!$isSilent){$p=''}\r\n\t\t(gsv -Name $SWIServiceName).Start(\"{`\"exe`\":`\"$softwarePath`\",`\"arg`\":`\"$p`\"}\")\r\n\t}Catch{\r\n\t\tReturn Print-Exception \"${business}(gsv -Name $SWIServiceName).Start(\"+'\"{`\"exe`\":'+\"$softwarePath\"+',`\"arg`\":`\"/s`\"}\")'\r\n\t}\r\n\tReturn Ret-Success $business\r\n};Function Handle-SpecialCharactersOfHTTP([String] $Characters){\r\n\tIf([String]::IsNullOrEmpty($Characters)){\r\n\t\tReturn $Null;\r\n\t}\r\n\t#[空格:%20 \":%22 #:%23 %:%25 &用%26 +:%2B ,:%2C /:%2F ::%3A ;:%3B <:%3C =:%3D >:%3E ?:%3F @:%40 \\:%5C |:%7C]\r\n\tReturn $Characters.replace(' ','%20').replace('+','%2B').replace('/','%2F').replace('(','%28').replace(')','%29')\r\n}\r\n\r\nFunction Unified-Return([Object[]]$msgs,[Parameter(Mandatory = $true)][String]$business){\r\n\tIf($msgs -eq $Null -Or $msgs.count -eq 0){\r\n\t\t$isSuccess='false';\r\n\t\t$msg='No message returned';\r\n\t}Else{\r\n\t\tIf(($msgs[-1]).EndsWith('%%SMP:success')){\r\n\t\t\t$isSuccess='true';\r\n\t\t}Else{\r\n\t\t\t$isSuccess='false';\r\n\t\t}\r\n\t\t$msg=($msgs -Join ';\t').replace('\\','/')\r\n\t}\r\n\tReturn \"{`\"isSuccess`\":`\"$isSuccess`\",`\"msg`\":`\"$msg`\",`\"business`\":`\"$business`\"}\";\r\n}\r\n\r\nFunction UnicodeToChinese([String]$sourceStr){\r\n\t[regex]::Replace($sourceStr,'\\\\u[0-9-a-f]{4}',{param($v);[char][int]($v.Value.replace('\\u','0x'))})\r\n}\r\n\r\nFunction Install-SDSotware([String] $hostUrl,$softwareName,$softwareVersion,$fileName32,$fileName64,[Object[]]$arr){\r\n\t$installed=$false\r\n\tForeach($sd in $arr){\r\n\t\t[String[]]$tm=$sd;\r\n\t\tIf($tm.count -le 2){continue}\r\n\t\t$name=$tm[0];\r\n\t\t$version=$tm[1];\r\n\t\tIf(($software=Get-SoftwareInfoByNameVersion $name) -ne $null){\r\n\t\t\tIf([String]::IsNullOrEmpty($software.DisplayVersion) -Or [String]::IsNullOrEmpty($version)){\r\n\t\t\t\t$installed=$true;break\r\n\t\t\t}Else{\r\n\t\t\t\tIf(($software.DisplayVersion -eq $version) -or \r\n\t\t\t\t\t((Transfer-VersionToDouble $software.DisplayVersion) -le (Transfer-VersionToDouble $version))){$installed=$true;break}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tIf($installed ){\r\n\t\tUnified-Return \"The system has installed anti-virus software, named $name, Version $version\" 'Install-SDSotware'\r\n\t}Else{\r\n\t\tUnified-Return (White-Software -hostUrl $hostUrl -softwareName $softwareName -softwareVersion32 $softwareVersion -fileName32 $fileName32 -softwareVersion64 $softwareVersion -fileName64 $fileName64 -silent $false) 'Install-SDSotware'\r\n\t}\r\n}\r\n\r\nFunction Transfer-VersionToDouble($version){\r\n\t$bs=$version.ToCharArray()\r\n\t$firstNum=$true\r\n\t$firstPoint=$true\r\n\tForeach($bb in $bs){\r\n\t\t$b=[int]$bb;\r\n\t\tIf($b -ge 48 -and $b -le 57){\r\n\t\t\t$des+=$bb\r\n\t\t}ElseIf($b -eq 46 -and $firstPoint){\r\n\t\t\tIf($des){\r\n\t\t\t\t$des+=$bb;\r\n\t\t\t\t$firstPoint=$false\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tIf($des){\r\n\t\tIf($des[$des.length -1] -eq '.'){$des.substring(0,$des.length -1)}else{$des}\r\n\t}Else{0}\r\n}\r\n\r\n$sourceStr='Install-SDSotware -hostUrl \"http://172.17.8.218:9888/nodeManager/file/download/\" -softwareName \"\\u0033\\u0036\\u0030\\u6740\\u6bd2\" -softwareVersion \"5.0.0.8170\" -fileName32 \"360sd_std_5.0.0.8170E.exe\" -fileName64 \"360sd_x64_std_5.0.0.8170D.exe\" -arr @(@(),@(),@(),@())'\r\niex (UnicodeToChinese $sourceStr)\r\n<#\r\n脚本使用解读\r\n注意:\t1. 360杀毒软件安装包 需要提前上传至部署的smp+服务器的指定位置 2.修改参数(hostUrl)为部署的smp+服务器 3.若软件名称包含中文,一定要先转成unicode编码\r\n示例:仅展示可修改部分\r\n参数: -hostUrl \"http://172.17.8.218:9888/nodeManager/file/download/\"\r\n参数: -arr @(@('软件名称1','软件版本1'),@('软件名称2','软件版本2'),@('软件名称3','软件版本3'),@('软件名称4','软件版本4')\r\n#>",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
})
db.complianceAction.save({
  "_id" : ObjectId("5f0d5bae9113551e18a6f767"),
  "itemId" : "5eec260c91135503d8584d74",
  "category" : NumberInt(99),
  "name" : "检测Top10杀毒软件任意1款安装,若均未安装，则默认推送安恒杀毒:开启",
  "templateName" : "Custom",
  "isTip" : true,
  "tipMessage" : "该系统未安装指定杀毒软件(360安全卫士、360杀毒、金山毒霸、node32、瑞星杀毒、腾讯电脑管家、2345安全卫士、卡巴斯基、火绒安全软件),系统默认推送安恒杀毒",
  "script" : "Function White-Software{\r\n\tparam([String] $hostUrl,\r\n\t\t[String] $softwareName,\r\n\t\t[String] $softwareVersion64,\r\n\t\t[String] $fileName64,\r\n\t\t[String] $softwareVersion32,\r\n\t\t[String] $fileName32,\r\n\t\t[bool] $silent=$true\r\n\t);\r\n\tIf([String]::isNullOrEmpty($softwareName)){Return \"BusinessException:softwareName can not empty\"}\r\n\tIf([String]::isNullOrEmpty($hostUrl)){Return \"BusinessException:hostUrl can not empty\"}\r\n\tIf([String]::isNullOrEmpty($fileName64) -and [String]::isNullOrEmpty($fileName32)){Return \"BusinessException:install package can not empty\"}\r\n\r\n\t$downloadPath = Join-Path $env:SystemDrive '/Program Files/Ruijie Networks/softwarePackage/';\r\n\tIf(!(Test-Path $downloadPath)){mkdir $downloadPath -Force|Out-Null}\r\n\tIf([IntPtr]::Size -eq 4){\r\n\t\tIf([String]::isNullOrEmpty($fileName32)){Return Ret-Success \"no installation package32 available, default and pass\"}\r\n\t\t$softwareVersion=$softwareVersion32;\r\n\t\t$bit='bit32';\r\n\t\t$fileName=$fileName32\r\n\t}Else{\r\n\t\tIf([String]::isNullOrEmpty($fileName64)){Return Ret-Success \"no installation package64 available, default and pass\"}\r\n\t\t$softwareVersion=$softwareVersion64;\r\n\t\t$bit='bit64';\r\n\t\t$fileName=$fileName64;\r\n\t}\r\n\t\r\n\tIf((Get-SoftwareInfoByNameVersion $softwareName $softwareVersion) -ne $null){Return Ret-Success \"${softwareName} has been installed\"}\r\n\t$softwarePath = Join-Path $downloadPath $fileName;\r\n\tIf(!(Test-Path \"$softwarePath\") -or (cat \"$softwarePath\" -TotalCount 1) -eq $null){\r\n\t\t$tmp=Handle-SpecialCharactersOfHTTP \"?fileName=$fileName&dir=win/$bit\";\r\n\t\t$remoteSoftwarePath=$hostUrl+'/temp'+$tmp;\r\n\t\t$Res=Download-File \"$remoteSoftwarePath\" \"$softwarePath\";\"$Res\";\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\t\r\n\t$file=ls $softwarePath;\r\n\t$Suffix=$file.Extension.substring(1);\r\n\tIf($null -ne (ps|?{$_.name -eq $file.baseName -And ($_.path -eq $null -Or $_.path -eq $softwarePath)})){Return \"$($file.name) is Installing\"}\r\n\t\r\n\tIf('msi' -eq $Suffix){\r\n\t\t$os=gwmi -Class Win32_OperatingSystem | Select -ExpandProperty Caption\r\n\t\tIf($os -Like '*Windows 7*' -Or $os -Like '*Windows 8*'){\r\n\t\t\tiex \"& cmd /c `'msiexec.exe /i `\"$softwarePath`\"`' /qn ADVANCED_OPTIONS=1 CHANNEL=100\"\r\n\t\t}Else{\r\n\t\t\tiex \"Msiexec /i `\"$softwarePath`\" /norestart /qn\" -ErrorAction SilentlyContinue;\r\n\t\t\tIf(!$?){Return Print-Exception \"Msiexec /i `\"$softwarePath`\" /norestart /qn\"}\r\n\t\t}\r\n\t}else{\r\n\t\t$Res=OperatorSoftwareBySWI $hostUrl $softwarePath $silent;\"$Res\";\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\tIf((Get-SoftwareInfoByNameVersion $softwareName $softwareVersion) -eq $null){Return \"BusinessException:Installation of the software has not been successful\"}\r\n\tReturn Ret-Success \r\n};Function Ret-Success([String] $business){\r\n\tReturn \"$business%%SMP:success\"\r\n};Function Is-Success($Ret){\r\n\tIf($Ret -ne $null -And ($Ret|Select -Last 1).EndsWith('%%SMP:success')){Return $True}\r\n\tReturn $False\r\n};Function Print-Exception([String]$command){\r\n\tReturn \"execute Command [$command] Exception,The Exception is $($error[0])\"\r\n};Function Download-File([String]$src,[String]$des,[bool]$isReplace=$false){\r\n\tIf([String]::IsNullOrEmpty($src)){Return \"BusinessException:Source file does not exist\"}\r\n\tIf([String]::IsNullOrEmpty($des)){Return \"BusinessException:Destination address cannot be empty\"}\r\n\tIf(Test-Path $des){\r\n\t\twhile (Test-FileLocked $des){\r\n\t\t\tsleep 1;\r\n\t\t\tIf($i++ -gt 1){Return \"File [$des] is in use\"}\r\n\t\t}\r\n\t\t$file=ls $des;\r\n\t\tIf(Test-Path ($file.DirectoryName+\"/\"+$file.basename+\"_end\")){Return Ret-Success \"Download-File:No Need Operator\"}\r\n\t}\r\n\tTry{\r\n\t\t$web=New-Object System.Net.WebClient;\r\n\t\t$web.Encoding=[System.Text.Encoding]::UTF8;\r\n\t\t$web.DownloadFile(\"$src\", \"$des\");\r\n\t\t$file=(ls $des);\r\n\t\t$endFile=$file.basename+\"_end\";\r\n\t\tNew-Item -Path $file.DirectoryName -Name $endFile -ItemType \"file\" |Out-Null\r\n\t\tIf(!(Test-Path $des) -or (Get-Content \"$des\" -totalcount 1) -eq $null){Return \"BusinessException:The downloaded file does not exist or the content is empty\"}\r\n\t}Catch{Return Print-Exception \"$web.DownloadFile($src,$des)\"}\r\n\tReturn Ret-Success \"Download-File\"\r\n};Function Test-FileLocked([string]$FilePath) {\r\n    try {[IO.File]::OpenWrite($FilePath).close();$false}catch{$true}\r\n};Function Get-SoftwareInfoByNameVersion([String] $name,[String] $version){\r\n\t$Key='Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall','SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall';\r\n\tIf([IntPtr]::Size -eq 8){$Key+='SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall'}\r\n\tForeach($_ In $Key){\r\n\t  $Hive='LocalMachine';\r\n\t  If('Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall' -ceq $_){$Hive='CurrentUser'}\r\n\t  $RegHive=[Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($Hive,$env:COMPUTERNAME);\r\n\t  $RegKey=$RegHive.OpenSubKey($_);\r\n\t  If([string]::IsNullOrEmpty($RegKey)){Continue}\r\n\t  $arrs=$RegKey.GetSubKeyNames();\r\n\t  Foreach($_ In $arrs){\r\n\t\t$SubKey=$RegKey.OpenSubKey($_);\r\n\t\t$tmp=$subkey.GetValue('DisplayName');\r\n\t\tIf(![string]::IsNullOrEmpty($tmp)){\r\n\t\t\t$tmp=$tmp.Trim();\r\n\t\t\tIf($tmp.gettype().name -eq 'string' -And $tmp -like $name){\r\n\t\t\t\t$DisplayVersion=$subkey.GetValue('DisplayVersion');\r\n\t\t\t\tIf(![string]::IsNullOrEmpty($version) -and $version -notlike $DisplayVersion){Continue}\r\n\t\t\t\t$retVal=''|Select 'DisplayName','DisplayVersion','UninstallString','InstallLocation','RegPath','InstallDate','InstallSource';\r\n\t\t\t\t$retVal.DisplayName=$subkey.GetValue('DisplayName');\r\n\t\t\t\t$retVal.DisplayVersion=$DisplayVersion;\r\n\t\t\t\t$retVal.UninstallString=$subkey.GetValue('UninstallString');\r\n\t\t\t\t$retVal.InstallLocation=$subkey.GetValue('InstallLocation');\r\n\t\t\t\t$retVal.RegPath=$subkey.GetValue('RegPath');\r\n\t\t\t\t$retVal.InstallDate=$subkey.GetValue('InstallDate');\r\n\t\t\t\t$retVal.InstallSource=$subkey.GetValue('InstallSource');\r\n\t\t\t\tReturn $retVal;\r\n\t\t\t}\r\n\t\t}\r\n\t\t$SubKey.Close()\r\n\t  };\r\n\t  $RegHive.Close()\r\n\t};\r\n};Function OperatorSoftwareBySWI([String]$hostUrl,[String]$softwarePath,$isSilent=$True){\r\n\t$business=\"[OperatorSoftwareBySWI:$softwarePath]=>>\"\r\n\tIf([String]::IsNullOrEmpty(\"$softwarePath\")){\r\n\t\tReturn \"uninstall script not exist\"\r\n\t}\r\n\tIf(!$softwarePath.EndsWith(\".exe\") -And !$softwarePath.EndsWith(\".exe`\"\")){\r\n\t\tReturn \"uninstall script format error[$softwarePath]\"\r\n\t}\r\n\tIf($softwarePath.StartsWith('\"')){\r\n\t\t$softwarePath=$softwarePath.substring(1,$softwarePath.LastIndexOf('\"'))\r\n\t}\r\n\t$SWIDir=Join-Path $env:SystemRoot 'System32';\r\n\tIf(!(Test-Path $SWIDir)){\r\n\t\tmkdir $SWIDir -Force|Out-Null;\r\n\t\tIf(!$?){Return Print-Exception \"${business}mkdir $SWIDir -Force|Out-Null\"}\r\n\t}\r\n\t\r\n\tIf([IntPtr]::Size -eq 8){$SWIFileName='SWIService64.exe'}Else{$SWIFileName='SWIService.exe';}\r\n\t$SWIPath=Join-Path $SWIDir $SWIFileName;\r\n\t$SWIServiceName='SWIserv';\r\n\tIf (!(Test-Path \"$SWIPath\")){\r\n\t\tIf([String]::IsNullOrEmpty(\"$hostUrl\")){Return \"When downloading the installation package, the host address cannot be empty\"}\r\n\t\t$remoteexePath=\"$hostUrl/$SWIFileName\";\r\n\t\t$Res=Download-File \"$remoteexePath\" \"$SWIPath\";\"$business$Res\";\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\t$SWI=gsv $SWIServiceName -ErrorAction SilentlyContinue\r\n\tIf($null -eq $SWI){\r\n\t\tTry{\r\n\t\t\tcd $SWIDir;\r\n\t\t\tiex \".\\$SWIFileName  -install -ErrorAction Stop\"\r\n\t\t}Catch{\r\n\t\t\tReturn Print-Exception \"${business}.\\SWIService.exe -install -ErrorAction Stop\"\r\n\t\t}\r\n\t}else{\r\n\t\tIf($SWI.Status -eq 'Running'){\r\n\t\t\tspsv -Name $SWIServiceName -ErrorAction SilentlyContinue;\r\n\t\t\tIf(!$?){Return Print-Exception \"${business}spsv -Name $SWIServiceName\"}\r\n\t\t}\r\n\t}\r\n\tTry{\r\n\t\t$p='/s'\r\n\t\tIf(!$isSilent){$p=''}\r\n\t\t(gsv -Name $SWIServiceName).Start(\"{`\"exe`\":`\"$softwarePath`\",`\"arg`\":`\"$p`\"}\")\r\n\t}Catch{\r\n\t\tReturn Print-Exception \"${business}(gsv -Name $SWIServiceName).Start(\"+'\"{`\"exe`\":'+\"$softwarePath\"+',`\"arg`\":`\"/s`\"}\")'\r\n\t}\r\n\tReturn Ret-Success $business\r\n};Function Handle-SpecialCharactersOfHTTP([String] $Characters){\r\n\tIf([String]::IsNullOrEmpty($Characters)){\r\n\t\tReturn $Null;\r\n\t}\r\n\t#[空格:%20 \":%22 #:%23 %:%25 &用%26 +:%2B ,:%2C /:%2F ::%3A ;:%3B <:%3C =:%3D >:%3E ?:%3F @:%40 \\:%5C |:%7C]\r\n\tReturn $Characters.replace(' ','%20').replace('+','%2B').replace('/','%2F').replace('(','%28').replace(')','%29')\r\n}\r\n\r\nFunction Unified-Return([Object[]]$msgs,[Parameter(Mandatory = $true)][String]$business){\r\n\tIf($msgs -eq $Null -Or $msgs.count -eq 0){\r\n\t\t$isSuccess='false';\r\n\t\t$msg='No message returned';\r\n\t}Else{\r\n\t\tIf(($msgs[-1]).EndsWith('%%SMP:success')){\r\n\t\t\t$isSuccess='true';\r\n\t\t}Else{\r\n\t\t\t$isSuccess='false';\r\n\t\t}\r\n\t\t$msg=($msgs -Join ';\t').replace('\\','/')\r\n\t}\r\n\tReturn \"{`\"isSuccess`\":`\"$isSuccess`\",`\"msg`\":`\"$msg`\",`\"business`\":`\"$business`\"}\";\r\n}\r\n\r\nFunction UnicodeToChinese([String]$sourceStr){\r\n\t[regex]::Replace($sourceStr,'\\\\u[0-9-a-f]{4}',{param($v);[char][int]($v.Value.replace('\\u','0x'))})\r\n}\r\n\r\nFunction Install-SDSotware([String] $hostUrl,$softwareName,$softwareVersion,$fileName32,$fileName64,[Object[]]$arr){\r\n\t$installed=$false\r\n\tForeach($name in $arr){If(($software=Get-SoftwareInfoByNameVersion $name)-ne $null){$installed=$true;break}}\r\n\tIf($installed){\r\n\t\tUnified-Return \"The system has installed anti-virus software, named $name, Version $($software.DisplayVersion) %%SMP:success\" 'Install-SDSotware'\r\n\t}Else{\r\n\t\tUnified-Return (White-Software -hostUrl $hostUrl -softwareName $softwareName -softwareVersion32 $softwareVersion -fileName32 $fileName32 -softwareVersion64 $softwareVersion -fileName64 $fileName64 -silent $false) 'Install-SDSotware'\r\n\t}\r\n}\r\n\r\n$sourceStr='Install-SDSotware `\r\n-hostUrl \"http://172.17.8.218:9888/nodeManager/file/download/\" `\r\n-softwareName \"\\u660e\\u5fa1\\u4e3b\\u673a\\u5b89\\u5168\\u53ca\\u7ba1\\u7406\\u7cfb\\u7edf\" `\r\n-softwareVersion \"2.0\" `\r\n-fileName32 \"win32_edr_setup.exe\" `\r\n-fileName64 \"win32_edr_setup.exe\" `\r\n-arr @(\"\\u91d1\\u5c71\\u6bd2\\u9738\",\"\\u0033\\u0036\\u0030\\u5b89\\u5168\\u536b\\u58eb\",\"ESET Security\",\"\\u706b\\u7ed2\\u5b89\\u5168\\u8f6f\\u4ef6\",\"\\u0033\\u0036\\u0030\\u6740\\u6bd2\",`\r\n\"\\u745e\\u661f\\u6740\\u6bd2\\u8f6f\\u4ef6\",\"\\u0032\\u0033\\u0034\\u0035\\u5b89\\u5168\\u536b\\u58eb\",\"Kaspersky Endpoint Security 10 for Windows\")'\r\niex (UnicodeToChinese $sourceStr)\r\n<#\r\n\t\t软件名称（unicode） \t \t\t\t\t软件名称（中文）\t\t\t\t\t\t\t别名\r\n1.\t\\u91d1\\u5c71\\u6bd2\\u9738\t\t\t\t\t金山毒霸\t\t\t\t\t\t\t\t\t金山毒霸\r\n2.\t\\u0033\\u0036\\u0030\\u5b89\\u5168\\u536b\\u58eb\t360安全卫士\t\t\t\t\t\t\t\t\t360安全卫士\r\n3.\t\\u0033\\u0036\\u0030\\u6740\\u6bd2\t\t\t\t360杀毒\t\t\t\t\t\t\t\t\t\t360杀毒\r\n4.\t\\u706b\\u7ed2\\u5b89\\u5168\\u8f6f\\u4ef6\t\t火绒安全软件\t\t\t\t\t\t\t\t火绒安全软件\r\n5.\t\\u745e\\u661f\\u6740\\u6bd2\\u8f6f\\u4ef6\t\t瑞星杀毒软件\t\t\t\t\t\t\t\t瑞星杀毒软件\r\n6.\t\\u0032\\u0033\\u0034\\u0035\\u5b89\\u5168\\u536b\\u58eb\t安全卫士 - 2345\t\t\t\t\t\t2345安全卫士\r\n7.\t\\u7535\\u8111\\u7ba1\\u5bb6\t\t\t\t\t电脑管家\t\t\t\t\t\t\t\t\t腾讯电脑管家\r\n8.\t纯英文无需转unicode\t\t\t\t\t\t\tESET Security\t\t\t\t\t\t\t\tnode32\r\n9.\t纯英文无需转unicode\t\t\t\t\t\t\tKaspersky Endpoint Security 10 for Windows\t卡巴斯基\r\n10.\t\\u660e\\u5fa1\\u4e3b\\u673a\\u5b89\\u5168\\u53ca\\u7ba1\\u7406\\u7cfb\\u7edf\t明御主机安全及管理系统\t安恒\r\n\r\n脚本使用解读\r\n注意:\t1. 360杀毒软件安装包 需要提前上传至部署的smp+服务器的指定位置 2.修改参数(hostUrl)为部署的smp+服务器 3.若软件名称包含中文,一定要先转成unicode编码\r\n示例:仅展示可修改部分\r\n参数: -hostUrl \"http://172.17.8.218:9888/nodeManager/file/download/\"\r\n参数: -arr @(\"名称1\",\"名称2\",\"名称3\",...,\"名称n\")\r\n#>",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
})

db.complianceAction.save({
  "_id" : ObjectId("6007c5bb91135536a0876b48"),
  "itemId" : "5eec260c91135503d8584d74",
  "category" : NumberInt(99),
  "name" : "安装G DATA:开启",
  "desc" : "德国杀毒软件",
  "templateName" : "Custom",
  "isTip" : true,
  "tipMessage" : "请安装\"G DATA\"杀毒",
  "script" : "Function White-Software{\r\n\tparam([String] $hostUrl,\r\n\t\t[String] $softwareName,\r\n\t\t[String] $softwareVersion64,\r\n\t\t[String] $fileName64,\r\n\t\t[String] $softwareVersion32,\r\n\t\t[String] $fileName32,\r\n\t\t[bool] $silent=$false\r\n\t)\r\n\tFunction Check-GermanAntivirus{\r\n\t\tIf(($ser=gsv AVKWCtl -ErrorAction SilentlyContinue) -eq $null){Return $false}\r\n\t\t$pro=ps AVKWCtl -ErrorAction SilentlyContinue\r\n\t\tIf($ser.status -ne 'Running' -Or $pro -eq $null){\r\n\t\t\tSet-Service $ser.name -StartupType Automatic -ErrorAction SilentlyContinue\r\n\t\t\tsasv $ser.name -ErrorAction SilentlyContinue\r\n\t\t\tsleep -Milliseconds 500\r\n\t\t\tIf((gsv AVKWCtl).status -ne 'Running'){Return $false}\r\n\t\t\tIf((ps AVKWCtl -ErrorAction SilentlyContinue) -eq $null){Return $false}\r\n\t\t}\r\n\t\tReturn $true\r\n\t}\r\n\tIf([String]::isNullOrEmpty($hostUrl)){Return \"BusinessException:hostUrl can not empty\"}\r\n\tIf([String]::isNullOrEmpty($fileName64) -and [String]::isNullOrEmpty($fileName32)){Return \"BusinessException:install package can not empty\"}\r\n\tIf(Check-GermanAntivirus){Return Ret-Success \"${softwareName} has been installed\"}\r\n\t\r\n\t$downloadPath = Join-Path $env:SystemDrive '/Program Files/Ruijie Networks/softwarePackage/';\r\n\tIf(!(Test-Path $downloadPath)){mkdir $downloadPath -Force|Out-Null}\r\n\tIf([IntPtr]::Size -eq 4){\r\n\t\tIf([String]::isNullOrEmpty($fileName32)){Return Ret-Success \"no installation package32 available, default and pass\"}\r\n\t\t$softwareVersion=$softwareVersion32;\r\n\t\t$bit='bit32';\r\n\t\t$fileName=$fileName32\r\n\t}Else{\r\n\t\tIf([String]::isNullOrEmpty($fileName64)){Return Ret-Success \"no installation package64 available, default and pass\"}\r\n\t\t$softwareVersion=$softwareVersion64;\r\n\t\t$bit='bit64';\r\n\t\t$fileName=$fileName64;\r\n\t}\r\n\tIf((ps|?{$_.name -eq 'setup'}) -ne $null){Return Ret-Processing \"$fileName is Installing\"}\r\n\t$softwarePath = Join-Path $downloadPath $fileName;\r\n\tIf(!(Test-Path \"$softwarePath\") -or (cat \"$softwarePath\" -TotalCount 1) -eq $null){\r\n\t\t$tmp=Handle-SpecialCharactersOfHTTP \"?fileName=$fileName&dir=win/$bit\";\r\n\t\t$remoteSoftwarePath=$hostUrl+'/temp'+$tmp;\r\n\t\t$Res=Download-File \"$remoteSoftwarePath\" \"$softwarePath\";$Res;\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\t$Res=OperatorSoftwareBySWI $hostUrl $softwarePath $false\r\n\tIf(!(Is-Success $Res)){Return $Res}\r\n\tIf((ps|?{$_.name -eq 'setup'}) -ne $null){Return Ret-Processing \"$fileName is Installing\"}\r\n\tIf(Check-GermanAntivirus){Return Ret-Success \"${softwareName} has been installed\"}\r\n\tReturn \"$softwareName install fail\"\r\n};Function Ret-Success([String] $business){\r\n\tReturn \"$business%%SMP:success\"\r\n};Function Is-Success($Ret){\r\n\tIf($Ret -ne $null -And ($Ret|Select -Last 1).EndsWith('%%SMP:success')){Return $True}\r\n\tReturn $False\r\n};Function Print-Exception([String]$command){\r\n\tReturn \"execute Command [$command] Exception,The Exception is $($error[0])\"\r\n};Function Download-File([String]$src,[String]$des,[bool]$isReplace=$false){\r\n\tIf([String]::IsNullOrEmpty($src)){Return \"Source file does not exist\"}\r\n\tIf([String]::IsNullOrEmpty($des)){Return \"Destination address cannot be empty\"}\r\n\t$res=Check-DownloadFileIsComplete $des\r\n\tIf($res.isComplete){Return Ret-Success \"Download-File:No Need Operator\"}\r\n\tif(Test-FileLocked $des){Return Ret-Processing \"File [$des] is in use\"}\r\n\tTry{\r\n\t\t$web=New-Object System.Net.WebClient\r\n\t\t$web.Encoding=[System.Text.Encoding]::UTF8\r\n\t\t$web.DownloadFile(\"$src\", \"$des\")\r\n\t\tIf(!(Test-Path $des) -or (Get-Content \"$des\" -totalcount 1) -eq $null){Return \"The downloaded file does not exist or the content is empty\"}\r\n\t\tIf([String]::IsNullOrEmpty($res.endFilePath)){$res=Check-DownloadFileIsComplete $des}\r\n\t\tNew-Item -Path $res.endFilePath -ItemType \"file\"|Out-Null\r\n\t}Catch{Return Print-Exception \"$web.DownloadFile($src,$des)\"}\r\n\tReturn Ret-Success \"Download-File\"\r\n};Function Ret-Processing($business){\r\n\tReturn \"$business%%SMP:processing\"\r\n};Function Test-FileLocked([string]$FilePath) {\r\n    try {[IO.File]::OpenWrite($FilePath).close();$false}catch{$true}\r\n};Function Check-DownloadFileIsComplete($FilePath){\r\n\t$isComplete=$false\r\n\tIf(Test-Path $FilePath){\r\n\t\t$file=gi $FilePath\r\n\t\t$endFilePath=Join-Path $file.DirectoryName \"$($file.basename)_end\"\r\n\t\t$isComplete=Test-Path $endFilePath\r\n\t}\r\n\tReturn New-Object PSObject -Property @{isComplete=$isComplete;endFilePath=$endFilePath;filePath=$FilePath}\r\n};Function Get-SoftwareInfoByNameVersion([String] $name,[String] $version){\r\n\t$Key='Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall','SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall';\r\n\tIf([IntPtr]::Size -eq 8){$Key+='SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall'}\r\n\tForeach($_ In $Key){\r\n\t  $Hive='LocalMachine';\r\n\t  If('Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall' -ceq $_){$Hive='CurrentUser'}\r\n\t  $RegHive=[Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($Hive,$env:COMPUTERNAME);\r\n\t  $RegKey=$RegHive.OpenSubKey($_);\r\n\t  If([string]::IsNullOrEmpty($RegKey)){Continue}\r\n\t  $arrs=$RegKey.GetSubKeyNames();\r\n\t  Foreach($_ In $arrs){\r\n\t\t$SubKey=$RegKey.OpenSubKey($_);\r\n\t\t$tmp=$subkey.GetValue('DisplayName');\r\n\t\tIf(![string]::IsNullOrEmpty($tmp)){\r\n\t\t\t$tmp=$tmp.Trim();\r\n\t\t\tIf($tmp.gettype().name -eq 'string' -And $tmp -like $name){\r\n\t\t\t\t$DisplayVersion=$subkey.GetValue('DisplayVersion');\r\n\t\t\t\tIf(![string]::IsNullOrEmpty($version) -and $version -notlike $DisplayVersion){Continue}\r\n\t\t\t\t$retVal=''|Select 'DisplayName','DisplayVersion','UninstallString','InstallLocation','RegPath','InstallDate','InstallSource';\r\n\t\t\t\t$retVal.DisplayName=$subkey.GetValue('DisplayName');\r\n\t\t\t\t$retVal.DisplayVersion=$DisplayVersion;\r\n\t\t\t\t$retVal.UninstallString=$subkey.GetValue('UninstallString');\r\n\t\t\t\t$retVal.InstallLocation=$subkey.GetValue('InstallLocation');\r\n\t\t\t\t$retVal.RegPath=$subkey.GetValue('RegPath');\r\n\t\t\t\t$retVal.InstallDate=$subkey.GetValue('InstallDate');\r\n\t\t\t\t$retVal.InstallSource=$subkey.GetValue('InstallSource');\r\n\t\t\t\tReturn $retVal;\r\n\t\t\t}\r\n\t\t}\r\n\t\t$SubKey.Close()\r\n\t  };\r\n\t  $RegHive.Close()\r\n\t};\r\n};Function OperatorSoftwareBySWI([String]$hostUrl,[String]$softwarePath,$isSilent=$false,$param){\r\n\tIf([String]::IsNullOrEmpty(\"$softwarePath\")){\r\n\t\tReturn \"Executable file [${softwarePath}] does not exist\"\r\n\t}\r\n\tIf($softwarePath.StartsWith('\"')){$softwarePath=$softwarePath.substring(1,$softwarePath.LastIndexOf('\"')-1).trim()}\r\n\tIf(!$softwarePath.EndsWith(\".exe\") -And !$softwarePath.EndsWith(\".exe`\"\")){\r\n\t\tReturn \"Executable file path format error [$softwarePath]\"\r\n\t}\r\n\t\r\n\t$business=\"OperatorSoftwareBySWI of `\"$softwarePath`\"\"\r\n\t$SWIDir=Join-Path $env:SystemRoot 'System32'\r\n\tIf(!(Test-Path $SWIDir)){\r\n\t\tmkdir $SWIDir -Force|Out-Null\r\n\t\tIf(!$?){Return Print-Exception \"${business}mkdir $SWIDir -Force|Out-Null\"}\r\n\t}\r\n\t\r\n\t$Res=Check-Processing $softwarePath\r\n\tIf(!(Is-Success $Res)){Return $Res}\r\n\t\r\n\tIf([IntPtr]::Size -eq 8){$SWIFileName='SWIService64.exe'}Else{$SWIFileName='SWIService.exe'}\r\n\t$SWIPath=Join-Path $SWIDir $SWIFileName\r\n\tIf(!(Check-DownloadFileIsComplete $SWIPath).isComplete){\r\n\t\tIf([String]::IsNullOrEmpty($hostUrl)){Return \"when downloading the installation package, the host address cannot be empty\"}\r\n\t\t$remoteexePath=\"$hostUrl/$SWIFileName\"\r\n\t\t$Res=Download-File \"$remoteexePath\" \"$SWIPath\"\r\n\t\tIf(!(Is-Success $Res)){Return $Res}\r\n\t}\r\n\t\r\n\tIf($isSilent){If([String]::IsNullOrEmpty($param)){$param='/quiet /norestart /s'}}else{$param=$null}\r\n\t$SWIServiceName='SWIserv';\r\n\tRestart-Service $SWIServiceName -ErrorAction SilentlyContinue\r\n\tIf(!$?){\r\n\t\tTry{\r\n\t\t\tIf((gsv $SWIServiceName -ErrorAction SilentlyContinue) -ne $null){sc.exe delete $SWIServiceName}\r\n\t\t\tcd $SWIDir;\r\n\t\t\tiex \".\\$SWIFileName -install -ErrorAction Stop\"\r\n\t\t}Catch{\r\n\t\t\tPrint-Exception \"${business}Restart-Service $SWIServiceName\"\r\n\t\t\tIf($param){start $softwarePath -ArgumentList @($param) -ErrorAction SilentlyContinue}Else{start $softwarePath -ErrorAction SilentlyContinue}\r\n\t\t\tIf(!$?){Return Print-Exception \"start $softwarePath -ArgumentList @($param)\"}Else{Ret-Success $business}\r\n\t\t}\r\n\t}\r\n\t \r\n\tspsv $SWIServiceName -ErrorAction SilentlyContinue;\r\n\tIf(!$?){Return Print-Exception \"${business}spsv $SWIServiceName\"}\r\n\t\r\n\tTry{\r\n\t\t(gsv $SWIServiceName).Start(\"{`\"exe`\":`\"$softwarePath`\",`\"arg`\":`\"$param`\"}\")\r\n\t\tsleep 1\r\n\t}Catch{\r\n\t\tReturn Print-Exception \"${business}(gsv $SWIServiceName).Start(\"+'\"{`\"exe`\":'+\"$softwarePath\"+',`\"arg`\":`\"/s`\"}\")'\r\n\t}\r\n\tReturn Ret-Success $business\r\n};Function Check-Processing([String]$path,[System.IO.FileInfo]$file){\r\n\t$path\r\n\tIf($file -eq $null){\r\n\t\tIf(!(Test-Path $path)){Return \"The path [$path] does not exist\"}\r\n\t\t$file=ls $path\t\r\n\t}\r\n\t$process=ps|?{$_.name -eq $file.baseName -And ($_.path -eq $null -Or $_.path -eq $file.FullName)}\r\n\tIf($process -ne $null){Return Ret-Processing \"$($file.fullname) is Installing\"}\r\n\tReturn Ret-Success\r\n}Function Handle-SpecialCharactersOfHTTP([String] $Characters){\r\n\tIf([String]::IsNullOrEmpty($Characters)){\r\n\t\tReturn $Null;\r\n\t}\r\n\t#[空格:%20 \":%22 #:%23 %:%25 &用%26 +:%2B ,:%2C /:%2F ::%3A ;:%3B <:%3C =:%3D >:%3E ?:%3F @:%40 \\:%5C |:%7C]\r\n\tReturn $Characters.replace(' ','%20').replace('+','%2B').replace('/','%2F').replace('(','%28').replace(')','%29')\r\n};Function Unified-Return([Object[]]$msgs,[Parameter(Mandatory = $true)][String]$business){\r\n\tIf($msgs -eq $Null -Or $msgs.count -eq 0){\r\n\t\t$isSuccess='false';\r\n\t\t$msg='No message returned';\r\n\t}Else{\r\n\t\tIf(($msgs[-1]).EndsWith('%%SMP:success')){\r\n\t\t\t$isSuccess='true';\r\n\t\t}Else{\r\n\t\t\t$isSuccess='false';\r\n\t\t}\r\n\t\t$msg=($msgs -Join ';;').replace('\\','/')\r\n\t}\r\n\tReturn \"{`\"isSuccess`\":`\"$isSuccess`\",`\"msg`\":`\"$msg`\",`\"business`\":`\"$business`\"}\";\r\n}\r\nUnified-Return (White-Software 'http://172.17.8.34:9888/nodeManager/file/download/' 'G DATA' $null 'GDClientPck.exe' $null 'GDClientPck.exe') 'install G-DATA'",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
})

/*
db.complianceAction.remove({"name":"TightVNC"})
db.complianceAction.save({
    "_id" : ObjectId("5f0d0c8e2ebc430006532860"),
    "category" : NumberInt(1),
    "name" : "TightVNC",
    "templateName" : "White-Software",
    "desc" : "TightVNC软件",
    "param" : [{
        "softwareName" : "TightVNC",
        "softwarePackage" : {
        "name" : "TightVNC-32bit.msi",
        "desc" : null,
        "adapterSys" : "win",
        "param" : null,
        "adapterNum" : "bit32",
        "packageType" : "unknown"
      }
    }, {
        "softwareName" : "TightVNC",
        "softwarePackage" : {
        "name" : "TightVNC-64bit.msi",
        "desc" : null,
        "adapterSys" : "win",
        "param" : null,
        "adapterNum" : "bit64",
        "packageType" : "unknown"
      }
    }],
    "isTip" : true,
    "tipMessage" : "您的终端未安装TightVNC软件！",
    "script" : "Function White-Software{\r\n\tparam([String] $hostUrl,\r\n\t\t[String] $softwareName,\r\n\t\t[String] $softwareVersion64,\r\n\t\t[String] $fileName64,\r\n\t\t[String] $softwareVersion32,\r\n\t\t[String] $fileName32,\r\n\t\t[bool] $silent=$true\r\n\t)\r\n\tIf([String]::isNullOrEmpty($softwareName)){Return \"BusinessException:softwareName can not empty\"}\r\n\tIf([String]::isNullOrEmpty($hostUrl)){Return \"BusinessException:hostUrl can not empty\"}\r\n\tIf([String]::isNullOrEmpty($fileName64) -and [String]::isNullOrEmpty($fileName32)){Return \"BusinessException:install package can not empty\"}\r\n\t\r\n\t$downloadPath = Join-Path $env:SystemDrive '/Program Files/Ruijie Networks/softwarePackage/';\r\n\tIf(!(Test-Path $downloadPath)){mkdir $downloadPath -Force|Out-Null}\r\n\tIf([IntPtr]::Size -eq 4){\r\n\t\tIf([String]::isNullOrEmpty($fileName32)){Return Ret-Success \"no installation package32 available, default and pass\"}\r\n\t\t$softwareVersion=$softwareVersion32;\r\n\t\t$bit='bit32';\r\n\t\t$fileName=$fileName32\r\n\t}Else{\r\n\t\tIf([String]::isNullOrEmpty($fileName64)){Return Ret-Success \"no installation package64 available, default and pass\"}\r\n\t\t$softwareVersion=$softwareVersion64;\r\n\t\t$bit='bit64';\r\n\t\t$fileName=$fileName64;\r\n\t}\r\n\tIf(Test-Path \"$($env:SystemDrive)\\Program Files (x86)\\TightVNC\\tvnserver.exe\") {\r\n\t\t$startFile=\"$($env:SystemDrive)\\Program Files (x86)\\TightVNC\\tvnserver.exe\"\r\n\t}ElseIf(Test-Path \"$($env:SystemDrive)\\Program Files\\TightVNC\\tvnserver.exe\") {\r\n\t\t$startFile=\"$($env:SystemDrive)\\Program Files\\TightVNC\\tvnserver.exe\"\r\n\t}\r\n\t$pass='15-224-193-197-37-128-73-235'\r\n\t$ischange1=Config-TightVNC -RegPath 'HKLM:\\SOFTWARE\\TightVNC\\Server' -Password $pass -ControlPassword $pass -PasswordViewOnly $pass\r\n\t$ischange2=Config-TightVNC -RegPath 'HKCU:\\SOFTWARE\\TightVNC\\Server' -Password $pass -ControlPassword $pass -PasswordViewOnly $pass\r\n\tIf($tmp=gsv tvnserver -ErrorAction SilentlyContinue){\t\t\r\n\t\tIf($ischange1 -Or $ischange2){\r\n\t\t\tRestart-Service tvnserver -ErrorAction SilentlyContinue\r\n\t\t}ElseIf($tmp.Status -ne 'Running'){\r\n\t\t\tSet-Service tvnserver -StartupType Automatic -ErrorAction SilentlyContinue \r\n\t\t\tRestart-Service tvnserver -ErrorAction SilentlyContinue\r\n\t\t}\r\n\t\tIf($?){Return Ret-Success}\r\n\t}\r\n\t$softwarePath = Join-Path $downloadPath $fileName;\r\n\tIf(!(Test-Path \"$softwarePath\") -or (cat \"$softwarePath\" -TotalCount 1) -eq $null){\r\n\t\t$tmp=Handle-SpecialCharactersOfHTTP \"?fileName=$fileName&dir=win/$bit\";\r\n\t\t$remoteSoftwarePath=$hostUrl+'/temp'+$tmp;\r\n\t\t$Res=Download-File \"$remoteSoftwarePath\" \"$softwarePath\";\"$Res\";\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\t\r\n\t$file=ls $softwarePath;\r\n\tIf($null -ne (ps|?{$_.name -eq $file.baseName -And ($_.path -eq $null -Or $_.path -eq $softwarePath)})){Return \"$($file.name) is Installing\"}\r\n\t\r\n\tIf('.msi' -eq $file.Extension){\r\n\t\tIf($silent){\r\n\t\t\tiex \"& cmd /c `'msiexec.exe /i `\"$softwarePath`\"`' /norestart /qn ADVANCED_OPTIONS=1 CHANNEL=100\"\r\n\t\t}Else{\r\n\t\t\tiex \"& cmd /c `'msiexec.exe /i `\"$softwarePath`\"`' ADVANCED_OPTIONS=1 CHANNEL=100\"\r\n\t\t}\r\n\t\tIf(!$?){Return Print-Exception \"Msiexec /i `\"$softwarePath`\" /norestart /qn\"}\r\n\t}else{\r\n\t\t$Res=OperatorSoftwareBySWI $hostUrl $softwarePath $silent;\"$Res\";\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\tIf((Get-SoftwareInfoByNameVersion $softwareName $softwareVersion) -eq $null){Return \"BusinessException:Installation of the software has not been successful\"}\r\n\tRestart-Service tvnserver -ErrorAction SilentlyContinue\r\n\tIf($?){Return Ret-Success}\r\n};Function Config-TightVNC{\r\n\tParam(\r\n\t\t[Parameter(Mandatory=$true)]$RegPath,[bool]$IsReplace=$True,[String]$Password,[String]$ControlPassword,[String]$PasswordViewOnly,\r\n\t\t[String]$QueryTimeout,[String]$ExtraPorts,[String]$QueryAcceptOnTimeout,[String]$LocalInputPriorityTimeout,[String]$LocalInputPriority,\r\n\t\t[String]$BlockRemoteInput,[String]$BlockLocalInput,[String]$IpAccessControl,[String]$RfbPort,[String]$HttpPort,[String]$DisconnectAction,\r\n\t\t[String]$AcceptRfbConnections,[String]$UseVncAuthentication,[String]$UseControlAuthentication,[String]$RepeatControlAuthentication,\r\n\t\t[String]$LoopbackOnly,[String]$AcceptHttpConnections,[String]$LogLevel,[String]$EnableFileTransfers,[String]$RemoveWallpaper,[String]$UseMirrorDriver,\r\n\t\t[String]$EnableUrlParams,[String]$AlwaysShared,[String]$NeverShared,[String]$DisconnectClients,[String]$PollingInterval,[String]$AllowLoopback,\r\n\t\t[String]$VideoRecognitionInterval,[String]$GrabTransparentWindows,[String]$SaveLogToAllUsersPath,[String]$RunControlInterface,[String]$VideoClasses\r\n\t)\r\n\r\n\t$DefautV=@{\r\n\t\tPassword='Binary:@(15,224,193,197,37,128,73,235)';ControlPassword='Binary:@(15,224,193,197,37,128,73,235)';PasswordViewOnly='Binary:@(15,224,193,197,37,128,73,235)';\r\n\t\tQueryTimeout='Dword:30';ExtraPorts='String:';QueryAcceptOnTimeout='Dword:0';\r\n\t\tLocalInputPriorityTimeout='Dword:3';LocalInputPriority='Dword:0';BlockRemoteInput='Dword:0';\r\n\t\tBlockLocalInput='Dword:0';IpAccessControl='String:';RfbPort='Dword:5900';\r\n\t\tHttpPort='Dword:5800';DisconnectAction='Dword:0';AcceptRfbConnections='Dword:1';\r\n\t\tUseVncAuthentication='Dword:1';UseControlAuthentication='Dword:1';RepeatControlAuthentication='Dword:0';\r\n\t\tLoopbackOnly='Dword:0';AcceptHttpConnections='Dword:1';LogLevel='Dword:0';\r\n\t\tEnableFileTransfers='Dword:1';RemoveWallpaper='Dword:1';UseMirrorDriver='Dword:1';\r\n\t\tEnableUrlParams='Dword:1';AlwaysShared='Dword:0';NeverShared='Dword:0';\r\n\t\tDisconnectClients='Dword:1';PollingInterval='Dword:1000';AllowLoopback='Dword:0';\r\n\t\tVideoRecognitionInterval='Dword:3000';GrabTransparentWindows='Dword:1';SaveLogToAllUsersPath='Dword:0';\r\n\t\tRunControlInterface='Dword:1';VideoClasses='String:'\r\n\t}\r\n\t\r\n\t$IsChange=$False \r\n\tIf(!(Test-Path $RegPath)){$null=md $RegPath -Force -ErrorAction SilentlyContinue}\r\n\t$reg=gi $RegPath\r\n\t$pks=$PSBoundParameters.keys\r\n\t#处理上送参数\r\n\tForeach($pk in $pks){\r\n\t\t$dm=$DefautV.$pk\r\n\t\tIf(!$dm){Continue}\r\n\t\t$DefautV.remove($pk)\r\n\t\t$pv=$PSBoundParameters[$pk]\r\n\t\t$rv=$reg.GetValue($pk)\r\n\t\t$dt=$dm.split(':')[0]\r\n\t\tIf('Binary' -eq $dt){\r\n\t\t\tIf($rv -eq $null){$rv=''}\r\n\t\t\tIf($pv -eq ($rv -join '-')){Continue}\r\n\t\t\t$pv=$pv.split('-')\r\n\t\t}Else{If($pv -eq $rv){Continue}}\r\n\t\tIf($IsReplace){sp $RegPath -Name $pk -Value $pv -Type $dt;$IsChange=$True}\r\n\t}\r\n\t\r\n\t$dks=$DefautV.keys\r\n\t#处理默认参数（若默认值不存在，会影响整体功能）\r\n\tForeach($dk in $dks){\r\n\t\tIf($reg.GetValue($dk) -ne $null){Continue}\r\n\t\t$arr=$DefautV.$dk.split(':')\r\n\t\t$dt=$arr[0]\r\n\t\t$dv=$arr[1]\r\n\t\tIf('Binary' -eq $dt){$dv=iex \"$($arr[1])\"}\r\n\t\tsp $RegPath -Name $dk -Value $dv -Type $dt\r\n\t\t$IsChange=$True\r\n\t}\r\n\tReturn $IsChange\r\n};Function Ret-Success([String] $business){\r\n\tReturn \"$business%%SMP:success\"\r\n};Function Is-Success($Ret){\r\n\tIf($Ret -ne $null -And ($Ret|Select -Last 1).EndsWith('%%SMP:success')){Return $True}\r\n\tReturn $False\r\n};Function Print-Exception([String]$command){\r\n\tReturn \"execute Command [$command] Exception,The Exception is $($error[0])\"\r\n};Function Download-File([String]$src,[String]$des,[bool]$isReplace=$false){\r\n\tIf([String]::IsNullOrEmpty($src)){Return \"BusinessException:Source file does not exist\"}\r\n\tIf([String]::IsNullOrEmpty($des)){Return \"BusinessException:Destination address cannot be empty\"}\r\n\tIf(Test-Path $des){\r\n\t\twhile (Test-FileLocked $des){\r\n\t\t\tsleep 1;\r\n\t\t\tIf($i++ -gt 1){Return \"File [$des] is in use\"}\r\n\t\t}\r\n\t\t$file=ls $des;\r\n\t\tIf(Test-Path ($file.DirectoryName+\"/\"+$file.basename+\"_end\")){Return Ret-Success \"Download-File:No Need Operator\"}\r\n\t}\r\n\tTry{\r\n\t\t$web=New-Object System.Net.WebClient;\r\n\t\t$web.Encoding=[System.Text.Encoding]::UTF8;\r\n\t\t$web.DownloadFile(\"$src\", \"$des\");\r\n\t\t$file=(ls $des);\r\n\t\t$endFile=$file.basename+\"_end\";\r\n\t\tNew-Item -Path $file.DirectoryName -Name $endFile -ItemType \"file\" |Out-Null\r\n\t\tIf(!(Test-Path $des) -or (Get-Content \"$des\" -totalcount 1) -eq $null){Return \"BusinessException:The downloaded file does not exist or the content is empty\"}\r\n\t}Catch{Return Print-Exception \"$web.DownloadFile($src,$des)\"}\r\n\tReturn Ret-Success \"Download-File\"\r\n};Function Get-SoftwareInfoByNameVersion([String] $name,[String] $version){\r\n\t$Key='Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall','SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall';\r\n\tIf([IntPtr]::Size -eq 8){$Key+='SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall'}\r\n\tForeach($_ In $Key){\r\n\t  $Hive='LocalMachine';\r\n\t  If('Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall' -ceq $_){$Hive='CurrentUser'}\r\n\t  $RegHive=[Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($Hive,$env:COMPUTERNAME);\r\n\t  $RegKey=$RegHive.OpenSubKey($_);\r\n\t  If([string]::IsNullOrEmpty($RegKey)){Continue}\r\n\t  $arrs=$RegKey.GetSubKeyNames();\r\n\t  Foreach($_ In $arrs){\r\n\t\t$SubKey=$RegKey.OpenSubKey($_);\r\n\t\t$tmp=$subkey.GetValue('DisplayName');\r\n\t\tIf(![string]::IsNullOrEmpty($tmp)){\r\n\t\t\t$tmp=$tmp.Trim();\r\n\t\t\tIf($tmp.gettype().name -eq 'string' -And $tmp -like $name){\r\n\t\t\t\t$DisplayVersion=$subkey.GetValue('DisplayVersion');\r\n\t\t\t\tIf(![string]::IsNullOrEmpty($version) -and $version -notlike $DisplayVersion){Continue}\r\n\t\t\t\t$retVal=''|Select 'DisplayName','DisplayVersion','UninstallString','InstallLocation','RegPath','InstallDate','InstallSource';\r\n\t\t\t\t$retVal.DisplayName=$subkey.GetValue('DisplayName');\r\n\t\t\t\t$retVal.DisplayVersion=$DisplayVersion;\r\n\t\t\t\t$retVal.UninstallString=$subkey.GetValue('UninstallString');\r\n\t\t\t\t$retVal.InstallLocation=$subkey.GetValue('InstallLocation');\r\n\t\t\t\t$retVal.RegPath=$subkey.GetValue('RegPath');\r\n\t\t\t\t$retVal.InstallDate=$subkey.GetValue('InstallDate');\r\n\t\t\t\t$retVal.InstallSource=$subkey.GetValue('InstallSource');\r\n\t\t\t\tReturn $retVal;\r\n\t\t\t}\r\n\t\t}\r\n\t\t$SubKey.Close()\r\n\t  };\r\n\t  $RegHive.Close()\r\n\t};\r\n};Function OperatorSoftwareBySWI([String]$hostUrl,[String]$softwarePath,$isSilent=$True){\r\n\t$business=\"[OperatorSoftwareBySWI:$softwarePath]=>>\"\r\n\tIf([String]::IsNullOrEmpty(\"$softwarePath\")){\r\n\t\tReturn \"uninstall script not exist\"\r\n\t}\r\n\tIf(!$softwarePath.EndsWith(\".exe\") -And !$softwarePath.EndsWith(\".exe`\"\")){\r\n\t\tReturn \"uninstall script format error[$softwarePath]\"\r\n\t}\r\n\tIf($softwarePath.StartsWith('\"')){\r\n\t\t$softwarePath=$softwarePath.substring(1,$softwarePath.LastIndexOf('\"'))\r\n\t}\r\n\t$SWIDir=Join-Path $env:SystemRoot 'System32';\r\n\tIf(!(Test-Path $SWIDir)){\r\n\t\tmkdir $SWIDir -Force|Out-Null;\r\n\t\tIf(!$?){Return Print-Exception \"${business}mkdir $SWIDir -Force|Out-Null\"}\r\n\t}\r\n\t\r\n\tIf([IntPtr]::Size -eq 8){$SWIFileName='SWIService64.exe'}Else{$SWIFileName='SWIService.exe';}\r\n\t$SWIPath=Join-Path $SWIDir $SWIFileName;\r\n\t$SWIServiceName='SWIserv';\r\n\tIf (!(Test-Path \"$SWIPath\")){\r\n\t\tIf([String]::IsNullOrEmpty(\"$hostUrl\")){Return \"When downloading the installation package, the host address cannot be empty\"}\r\n\t\t$remoteexePath=\"$hostUrl/$SWIFileName\";\r\n\t\t$Res=Download-File \"$remoteexePath\" \"$SWIPath\";\"$business$Res\";\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\t\r\n\tRestart-Service $SWIServiceName -ErrorAction SilentlyContinue;\r\n\tIf(!$?){\r\n\t\tTry{\r\n\t\t\tIf((gsv -Name $SWIServiceName -ErrorAction SilentlyContinue) -ne $null){sc.exe delete $SWIServiceName}\r\n\t\t\tcd $SWIDir;\r\n\t\t\tiex \".\\$SWIFileName  -install -ErrorAction Stop\"\r\n\t\t}Catch{\r\n\t\t\tReturn Print-Exception \"${business}Restart-Service -Name $SWIServiceName\"\r\n\t\t}\r\n\t}\r\n\t\r\n\tspsv -Name $SWIServiceName -ErrorAction SilentlyContinue;\r\n\tIf(!$?){Return Print-Exception \"${business}spsv -Name $SWIServiceName\"}\r\n\t\r\n\tTry{\r\n\t\tIf(!$isSilent){$p=''}Else{$p='/s'}\r\n\t\t(gsv -Name $SWIServiceName).Start(\"{`\"exe`\":`\"$softwarePath`\",`\"arg`\":`\"$p`\"}\")\r\n\t}Catch{\r\n\t\tReturn Print-Exception \"${business}(gsv -Name $SWIServiceName).Start(\"+'\"{`\"exe`\":'+\"$softwarePath\"+',`\"arg`\":`\"/s`\"}\")'\r\n\t}\r\n\tReturn Ret-Success $business\r\n};Function Handle-SpecialCharactersOfHTTP([String] $Characters){\r\n\tIf([String]::IsNullOrEmpty($Characters)){\r\n\t\tReturn $Null;\r\n\t}\r\n\t#[空格:%20 \":%22 #:%23 %:%25 &用%26 +:%2B ,:%2C /:%2F ::%3A ;:%3B <:%3C =:%3D >:%3E ?:%3F @:%40 \\:%5C |:%7C]\r\n\tReturn $Characters.replace(' ','%20').replace('+','%2B').replace('/','%2F').replace('(','%28').replace(')','%29')\r\n};Function Test-FileLocked([string]$FilePath) {\r\n    try {[IO.File]::OpenWrite($FilePath).close();$false}catch{$true}\r\n}\r\n$sourceStr='White-Software \"http://172.17.8.218:9888/nodeManager/file/download/\" \"TightVNC\" $null \"TightVNC-64bit.msi\" $null \"TightVNC-32bit.msi\"'\r\n$matchEvaluator={\r\n        param($v)\r\n        [char][int]($v.Value.replace('\\u','0x'))\r\n}\r\n$wq=[regex]::Replace($sourceStr,'\\\\u[0-9-a-f]{4}',$matchEvaluator)\r\nInvoke-Expression $wq",
    "_version_" : "0",
    "createTime" :new Date(),
    "lastModifiedTime" :new Date(),
    "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
})

db.complianceAction.remove({"name":"亚信安全防毒墙网络版客户端"})
db.complianceAction.save({
  "_id" : ObjectId("5fadfac7c0062500060b4283"),
  "category" : 1,
  "name" : "亚信安全防毒墙网络版客户端",
  "templateName" : "White-Software",
  "param" : [{
      "softwareId" : null,
      "softwareName" : "亚信安全防毒墙网络版客户端",
      "softwareVersion" : null,
      "softwarePackage" : {
        "name" : "oscam111132.exe",
        "desc" : null,
        "adapterSys" : "win",
        "param" : null,
        "adapterNum" : "bit32",
        "packageType" : "unknown"
      }
    }, {
      "softwareId" : null,
      "softwareName" : "亚信安全防毒墙网络版客户端",
      "softwareVersion" : null,
      "softwarePackage" : {
        "name" : "oscam111164.exe",
        "desc" : null,
        "adapterSys" : "win",
        "param" : null,
        "adapterNum" : "bit64",
        "packageType" : "unknown"
      }
    }],
  "isTip" : false,
  "tipMessage" : "",
  "script" : "Function White-Software{\r\n\tparam([String] $hostUrl,\r\n\t\t[String] $softwareName,\r\n\t\t[String] $softwareVersion64,\r\n\t\t[String] $fileName64,\r\n\t\t[String] $softwareVersion32,\r\n\t\t[String] $fileName32,\r\n\t\t[bool] $silent=$false\r\n\t)\r\n\tFunction Keep-AliveForAsia{\r\n\t\t$processName='PccNTMon'\r\n\t\tForeach($startFileTmp in \"$($env:SystemDrive)\\Program Files (x86)\\Asiainfo Security\\OfficeScan Client\\PccNTMon.exe\",\"$($env:SystemDrive)\\Program Files\\Asiainfo Security\\OfficeScan Client\\PccNTMon.exe\"){\r\n\t\t\tIf(Test-Path $startFileTmp){\r\n\t\t\t\tIf(ps $processName -ErrorAction SilentlyContinue){Return 'Service is already running'+$(Ret-Success)}\r\n\t\t\t\tIf(gsv SWIserv -ErrorAction SilentlyContinue){\t\t\t\t\t\r\n\t\t\t\t\tReturn OperatorSoftwareBySWI $hostUrl $startFileTmp $silent;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tReturn 'The startupFile of Asiatic was not found'\r\n\t}\r\n\tIf([String]::isNullOrEmpty($softwareName)){Return \"BusinessException:softwareName can not empty\"}\r\n\tIf([String]::isNullOrEmpty($hostUrl)){Return \"BusinessException:hostUrl can not empty\"}\r\n\tIf([String]::isNullOrEmpty($fileName64) -and [String]::isNullOrEmpty($fileName32)){Return \"BusinessException:install package can not empty\"}\r\n\t\r\n\t$downloadPath = Join-Path $env:SystemDrive '/Program Files/Ruijie Networks/softwarePackage/';\r\n\tIf(!(Test-Path $downloadPath)){mkdir $downloadPath -Force|Out-Null}\r\n\tIf([IntPtr]::Size -eq 4){\r\n\t\tIf([String]::isNullOrEmpty($fileName32)){Return Ret-Success \"no installation package32 available, default and pass\"}\r\n\t\t$softwareVersion=$softwareVersion32;\r\n\t\t$bit='bit32';\r\n\t\t$fileName=$fileName32\r\n\t}Else{\r\n\t\tIf([String]::isNullOrEmpty($fileName64)){Return Ret-Success \"no installation package64 available, default and pass\"}\r\n\t\t$softwareVersion=$softwareVersion64;\r\n\t\t$bit='bit64';\r\n\t\t$fileName=$fileName64;\r\n\t}\r\n\r\n\t$ret=Keep-AliveForAsia\r\n\tIf(Is-Success $ret){Return $ret}$ret\r\n\t\r\n\t$softwarePath = Join-Path $downloadPath $fileName;\r\n\tIf(!(Test-Path \"$softwarePath\") -or (cat \"$softwarePath\" -TotalCount 1) -eq $null){\r\n\t\t$tmp=Handle-SpecialCharactersOfHTTP \"?fileName=$fileName&dir=win/$bit\"\r\n\t\t$remoteSoftwarePath=$hostUrl+'/temp'+$tmp;\r\n\t\t$Res=Download-File \"$remoteSoftwarePath\" \"$softwarePath\";\"$Res\";\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\t\r\n\t$file=ls $softwarePath;\r\n\tIf($null -ne (ps|?{$_.name -eq $file.baseName -And ($_.path -eq $null -Or $_.path -eq $softwarePath)})){Return \"$($file.name) is Installing\"}\r\n\t\r\n\tIf('.msi' -eq $file.Extension){\r\n\t\tIf($silent){\r\n\t\t\t$null=iex \"& cmd /c `'msiexec.exe /i `\"$softwarePath`\"`' /norestart /qn ADVANCED_OPTIONS=1 CHANNEL=100\"  -ErrorAction SilentlyContinue\r\n\t\t}Else{\r\n\t\t\t$null=iex \"& cmd /c `'msiexec.exe /i `\"$softwarePath`\"`' ADVANCED_OPTIONS=1 CHANNEL=100\"  -ErrorAction SilentlyContinue\r\n\t\t}\r\n\t\tIf(!$?){Return Print-Exception \"Msiexec /i `\"$softwarePath`\" /norestart /qn\"}\r\n\t}else{\r\n\t\t$Res=OperatorSoftwareBySWI $hostUrl $softwarePath $silent;\"$Res\";\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\tIf((Get-SoftwareInfoByNameVersion $softwareName $softwareVersion) -eq $null){Return \"BusinessException:Installation of the software has not been successful\"}\r\n\tKeep-AliveForAsia\r\n};Function Set-Processd([String]$processName,[bool]$isRun,[String]$startFile,[bool]$isClear=$false){\r\n\t$business=\"[Set-Processd $processName]=>>\"\r\n\tIf([String]::isNullOrEmpty($processName)){\r\n\t\tReturn \"${business}BusinessException:processName can not empty\"\r\n\t}\r\n\t$pro=Get-Process $processName -ErrorAction SilentlyContinue\r\n\tIf($isRun){\r\n\t\tIf($pro -ne $null){\r\n\t\t\tReturn \"${business}No Need Operator%%SMP:success\"\r\n\t\t}\r\n\t\tIf([String]::isNullOrEmpty($startFile)){\r\n\t\t\tReturn \"${business}BusinessException:To start a process, The process startFile cannot be empty\"\r\n\t\t}\r\n\t\t\r\n\t\tIf(!(Test-Path $startFile)){\r\n\t\t\tReturn \"${business}BusinessException:[$startFile] does not exist,cannot start process\"\r\n\t\t}\r\n\t\t\r\n\t\tStart-Process $startFile\r\n\t\tIf(!$?){Return Print-Exception \"${business}Start-Process $startFile\"}\r\n\t\tReturn Ret-Success $business\r\n\t}Else{\r\n\t\tIf($pro -eq $null){\r\n\t\t\tIf($isClear){\r\n\t\t\t\tIf([String]::isNullOrEmpty($startFile)){\r\n\t\t\t\t\tReturn \"${business}BusinessException:To clean up a process, The process startFile cannot be empty\"\r\n\t\t\t\t}\r\n\t\t\t\trm -Force $startFile -ErrorAction SilentlyContinue\r\n\t\t\t\tIf(!$?){Return Print-Exception \"${business}rm -Force $startFile\"}\r\n\t\t\t}\r\n\t\t\tReturn \"${business}No Need Operator%%SMP:success\"\r\n\t\t}\r\n\t\t\r\n\t\t$pro|Foreach{\r\n\t\t\tStop-Process $_.Id -Force -ErrorAction SilentlyContinue\r\n\t\t\tIf(!$?){Return Print-Exception \"Stop-Process $_.Id -Force\"}\r\n\t\t}\r\n\t\tSleep 1\r\n\t\t$pro=Get-Process $processName -ErrorAction SilentlyContinue\r\n\t\tIf($pro -ne $null){\r\n\t\t\tReturn \"${business}BusinessException:Failed to terminate process\"\r\n\t\t}\r\n\t\t\r\n\t\tIf($isClear){\r\n\t\t\tIf([String]::isNullOrEmpty($startFile)){\r\n\t\t\t\tReturn \"${business}BusinessException:To start a process, The process startFile cannot be empty\"\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tIf(!(Test-Path $startFile)){\r\n\t\t\t\tReturn \"${business}BusinessException:[$startFile] does not exist,cannot start process\"\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\trm -Force $startFile -ErrorAction SilentlyContinue\r\n\t\t\tIf(!$?){Return Print-Exception \"rm -Force $startFile\"}\r\n\t\t}\r\n\t\tReturn Ret-Success $business\r\n\t}\r\n};Function Ret-Success([String] $business){\r\n\tReturn \"$business%%SMP:success\"\r\n};Function Is-Success($Ret){\r\n\tIf($Ret -ne $null -And ($Ret|Select -Last 1).EndsWith('%%SMP:success')){Return $True}\r\n\tReturn $False\r\n};Function Print-Exception([String]$command){\r\n\tReturn \"execute Command [$command] Exception,The Exception is $($error[0])\"\r\n};Function Download-File([String]$src,[String]$des,[bool]$isReplace=$false){\r\n\tIf([String]::IsNullOrEmpty($src)){Return \"BusinessException:Source file does not exist\"}\r\n\tIf([String]::IsNullOrEmpty($des)){Return \"BusinessException:Destination address cannot be empty\"}\r\n\t$res=Check-DownloadFileIsComplete $des\r\n\tIf($res.isComplete){Return Ret-Success \"Download-File:No Need Operator\"}\r\n\twhile (Test-FileLocked $des){\r\n\t\tsleep 1\r\n\t\tIf($i++ -gt 1){Return \"File [$des] is in use\"}\r\n\t}\r\n\tTry{\r\n\t\t$web=New-Object System.Net.WebClient\r\n\t\t$web.Encoding=[System.Text.Encoding]::UTF8\r\n\t\t$web.DownloadFile(\"$src\", \"$des\")\r\n\t\tIf(!(Test-Path $des) -or (Get-Content \"$des\" -totalcount 1) -eq $null){Return \"BusinessException:The downloaded file does not exist or the content is empty\"}\r\n\t\tIf([String]::IsNullOrEmpty($res.endFilePath)){$res=Check-DownloadFileIsComplete $des}\r\n\t\tNew-Item -Path $res.endFilePath -ItemType \"file\"|Out-Null\r\n\t}Catch{Return Print-Exception \"$web.DownloadFile($src,$des)\"}\r\n\tReturn Ret-Success \"Download-File\"\r\n};Function Test-FileLocked([string]$FilePath) {\r\n    try {[IO.File]::OpenWrite($FilePath).close();$false}catch{$true}\r\n};Function Check-DownloadFileIsComplete($FilePath){\r\n\t$isComplete=$false\r\n\tIf(Test-Path $FilePath){\r\n\t\t$file=gi $FilePath\r\n\t\t$endFilePath=Join-Path $file.DirectoryName \"$($file.basename)_end\"\r\n\t\t$isComplete=Test-Path $endFilePath\r\n\t}\r\n\tReturn New-Object PSObject -Property @{isComplete=$isComplete;endFilePath=$endFilePath;filePath=$FilePath}\r\n};Function Get-SoftwareInfoByNameVersion([String] $name,[String] $version){\r\n\t$Key='Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall','SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall';\r\n\tIf([IntPtr]::Size -eq 8){$Key+='SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall'}\r\n\tForeach($_ In $Key){\r\n\t  $Hive='LocalMachine';\r\n\t  If('Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall' -ceq $_){$Hive='CurrentUser'}\r\n\t  $RegHive=[Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($Hive,$env:COMPUTERNAME);\r\n\t  $RegKey=$RegHive.OpenSubKey($_);\r\n\t  If([string]::IsNullOrEmpty($RegKey)){Continue}\r\n\t  $arrs=$RegKey.GetSubKeyNames();\r\n\t  Foreach($_ In $arrs){\r\n\t\t$SubKey=$RegKey.OpenSubKey($_);\r\n\t\t$tmp=$subkey.GetValue('DisplayName');\r\n\t\tIf(![string]::IsNullOrEmpty($tmp)){\r\n\t\t\t$tmp=$tmp.Trim();\r\n\t\t\tIf($tmp.gettype().name -eq 'string' -And $tmp -like $name){\r\n\t\t\t\t$DisplayVersion=$subkey.GetValue('DisplayVersion');\r\n\t\t\t\tIf(![string]::IsNullOrEmpty($version) -and $version -notlike $DisplayVersion){Continue}\r\n\t\t\t\t$retVal=''|Select 'DisplayName','DisplayVersion','UninstallString','InstallLocation','RegPath','InstallDate','InstallSource';\r\n\t\t\t\t$retVal.DisplayName=$subkey.GetValue('DisplayName');\r\n\t\t\t\t$retVal.DisplayVersion=$DisplayVersion;\r\n\t\t\t\t$retVal.UninstallString=$subkey.GetValue('UninstallString');\r\n\t\t\t\t$retVal.InstallLocation=$subkey.GetValue('InstallLocation');\r\n\t\t\t\t$retVal.RegPath=$subkey.GetValue('RegPath');\r\n\t\t\t\t$retVal.InstallDate=$subkey.GetValue('InstallDate');\r\n\t\t\t\t$retVal.InstallSource=$subkey.GetValue('InstallSource');\r\n\t\t\t\tReturn $retVal;\r\n\t\t\t}\r\n\t\t}\r\n\t\t$SubKey.Close()\r\n\t  };\r\n\t  $RegHive.Close()\r\n\t};\r\n};Function OperatorSoftwareBySWI([String]$hostUrl,[String]$softwarePath,$isSilent=$True){\r\n\tIf([String]::IsNullOrEmpty(\"$softwarePath\")){\r\n\t\tReturn \"uninstall script not exist\"\r\n\t}\r\n\tIf($softwarePath.StartsWith('\"')){$softwarePath=$softwarePath.substring(1,$softwarePath.LastIndexOf('\"')-1).trim()}\r\n\tIf(!$softwarePath.EndsWith(\".exe\") -And !$softwarePath.EndsWith(\".exe`\"\")){\r\n\t\tReturn \"uninstall script format error[$softwarePath]\"\r\n\t}\r\n\t\r\n\t$business=\"[OperatorSoftwareBySWI:$softwarePath]=>>\"\r\n\t$SWIDir=Join-Path $env:SystemRoot 'System32'\r\n\tIf(!(Test-Path $SWIDir)){\r\n\t\tmkdir $SWIDir -Force|Out-Null;\r\n\t\tIf(!$?){Return Print-Exception \"${business}mkdir $SWIDir -Force|Out-Null\"}\r\n\t}\r\n\t\r\n\tIf([IntPtr]::Size -eq 8){$SWIFileName='SWIService64.exe'}Else{$SWIFileName='SWIService.exe'}\r\n\t$SWIPath=Join-Path $SWIDir $SWIFileName\r\n\tIf(!(Check-DownloadFileIsComplete $SWIPath).isComplete){\r\n\t\tIf([String]::IsNullOrEmpty($hostUrl)){Return \"When downloading the installation package, the host address cannot be empty\"}\r\n\t\t$remoteexePath=\"$hostUrl/$SWIFileName\"\r\n\t\t$Res=Download-File \"$remoteexePath\" \"$SWIPath\";\"$business$Res\"\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\t\r\n\tIf(!$isSilent){$p=''}Else{$p='/s'}\r\n\t$SWIServiceName='SWIserv';\r\n\tRestart-Service $SWIServiceName -ErrorAction SilentlyContinue;\r\n\tIf(!$?){\r\n\t\tTry{\r\n\t\t\tIf((gsv -Name $SWIServiceName -ErrorAction SilentlyContinue) -ne $null){sc.exe delete $SWIServiceName}\r\n\t\t\tcd $SWIDir;\r\n\t\t\tiex \".\\$SWIFileName  -install -ErrorAction Stop\"\r\n\t\t}Catch{\r\n\t\t\tPrint-Exception \"${business}Restart-Service -Name $SWIServiceName\"\r\n\t\t\tIf($p){start $softwarePath -ArgumentList @($p) -ErrorAction SilentlyContinue}Else{start $softwarePath -ErrorAction SilentlyContinue}\r\n\t\t\tIf(!$?){Return Print-Exception \"start $softwarePath -ArgumentList @($p)\"}Else{Ret-Success $business}\r\n\t\t}\r\n\t}\r\n\t \r\n\tspsv -Name $SWIServiceName -ErrorAction SilentlyContinue;\r\n\tIf(!$?){Return Print-Exception \"${business}spsv -Name $SWIServiceName\"}\r\n\t\r\n\tTry{\r\n\t\t(gsv -Name $SWIServiceName).Start(\"{`\"exe`\":`\"$softwarePath`\",`\"arg`\":`\"$p`\"}\")\r\n\t}Catch{\r\n\t\tReturn Print-Exception \"${business}(gsv -Name $SWIServiceName).Start(\"+'\"{`\"exe`\":'+\"$softwarePath\"+',`\"arg`\":`\"/s`\"}\")'\r\n\t}\r\n\tReturn Ret-Success $business\r\n};Function Handle-SpecialCharactersOfHTTP([String] $Characters){\r\n\tIf([String]::IsNullOrEmpty($Characters)){\r\n\t\tReturn $Null;\r\n\t}\r\n\t#[空格:%20 \":%22 #:%23 %:%25 &用%26 +:%2B ,:%2C /:%2F ::%3A ;:%3B <:%3C =:%3D >:%3E ?:%3F @:%40 \\:%5C |:%7C]\r\n\tReturn $Characters.replace(' ','%20').replace('+','%2B').replace('/','%2F').replace('(','%28').replace(')','%29')\r\n}\r\n$sourceStr='White-Software \"http://172.17.8.218:9888//nodeManager/file/download/\" \"\\u4e9a\\u4fe1\\u5b89\\u5168\\u9632\\u6bd2\\u5899\\u7f51\\u7edc\\u7248\\u5ba2\\u6237\\u7aef\" \"\" \"oscam111164.exe\" \"\" \"oscam111132.exe\"'\r\n$matchEvaluator={\r\n        param($v)\r\n        [char][int]($v.Value.replace('\\u','0x'))\r\n}\r\n$wq=[regex]::Replace($sourceStr,'\\\\u[0-9-a-f]{4}',$matchEvaluator)\r\nInvoke-Expression $wq",
  "creator" : "admin",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
 })
 */
/*自定义合规-end*/